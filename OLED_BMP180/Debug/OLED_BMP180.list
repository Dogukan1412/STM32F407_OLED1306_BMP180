
OLED_BMP180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08004278  08004278  00014278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c8  080048c8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048d0  080048d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080048d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000051c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000594  20000594  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b8c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018d8  00000000  00000000  00028c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  0002a510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000750  00000000  00000000  0002ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000205a0  00000000  00000000  0002b478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a93b  00000000  00000000  0004ba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2a1c  00000000  00000000  00056353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00118d6f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002558  00000000  00000000  00118dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004260 	.word	0x08004260

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004260 	.word	0x08004260

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b974 	b.w	8000dfc <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468e      	mov	lr, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14d      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	d969      	bls.n	8000c14 <__udivmoddi4+0xe8>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b152      	cbz	r2, 8000b5c <__udivmoddi4+0x30>
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	f1c2 0120 	rsb	r1, r2, #32
 8000b4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b56:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	0c21      	lsrs	r1, r4, #16
 8000b62:	fbbe f6f8 	udiv	r6, lr, r8
 8000b66:	fa1f f78c 	uxth.w	r7, ip
 8000b6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b72:	fb06 f107 	mul.w	r1, r6, r7
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 811f 	bcs.w	8000dc4 <__udivmoddi4+0x298>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 811c 	bls.w	8000dc4 <__udivmoddi4+0x298>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 f707 	mul.w	r7, r0, r7
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x92>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb0:	f080 810a 	bcs.w	8000dc8 <__udivmoddi4+0x29c>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 8107 	bls.w	8000dc8 <__udivmoddi4+0x29c>
 8000bba:	4464      	add	r4, ip
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	1be4      	subs	r4, r4, r7
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa4>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xc2>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	f000 80ef 	beq.w	8000dbe <__udivmoddi4+0x292>
 8000be0:	2600      	movs	r6, #0
 8000be2:	e9c5 0100 	strd	r0, r1, [r5]
 8000be6:	4630      	mov	r0, r6
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f683 	clz	r6, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d14a      	bne.n	8000c8c <__udivmoddi4+0x160>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd4>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80f9 	bhi.w	8000df2 <__udivmoddi4+0x2c6>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	469e      	mov	lr, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa4>
 8000c0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xec>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 8092 	bne.w	8000d46 <__udivmoddi4+0x21a>
 8000c22:	eba1 010c 	sub.w	r1, r1, ip
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	0c20      	lsrs	r0, r4, #16
 8000c32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c36:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3e:	fb0e f003 	mul.w	r0, lr, r3
 8000c42:	4288      	cmp	r0, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x12c>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x12a>
 8000c50:	4288      	cmp	r0, r1
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2c0>
 8000c56:	4643      	mov	r3, r8
 8000c58:	1a09      	subs	r1, r1, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c60:	fb07 1110 	mls	r1, r7, r0, r1
 8000c64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x156>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x154>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c80:	4608      	mov	r0, r1
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8a:	e79c      	b.n	8000bc6 <__udivmoddi4+0x9a>
 8000c8c:	f1c6 0720 	rsb	r7, r6, #32
 8000c90:	40b3      	lsls	r3, r6
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	40f9      	lsrs	r1, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb2:	0c20      	lsrs	r0, r4, #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b8>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2bc>
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2bc>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cec:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	458e      	cmp	lr, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1e2>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2b4>
 8000d06:	458e      	cmp	lr, r1
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2b4>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d12:	fba0 9402 	umull	r9, r4, r0, r2
 8000d16:	eba1 010e 	sub.w	r1, r1, lr
 8000d1a:	42a1      	cmp	r1, r4
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46a6      	mov	lr, r4
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x2a0>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x212>
 8000d26:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d32:	fa22 f306 	lsr.w	r3, r2, r6
 8000d36:	40f1      	lsrs	r1, r6
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	f1c2 0320 	rsb	r3, r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
 8000d54:	4091      	lsls	r1, r2
 8000d56:	4301      	orrs	r1, r0
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d64:	fb07 3610 	mls	r6, r7, r0, r3
 8000d68:	0c0b      	lsrs	r3, r1, #16
 8000d6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d72:	429e      	cmp	r6, r3
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x260>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b8>
 8000d84:	429e      	cmp	r6, r3
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b8>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d94:	fb07 3316 	mls	r3, r7, r6, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x28a>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000db2:	3e02      	subs	r6, #2
 8000db4:	4461      	add	r1, ip
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0x104>
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e705      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e3      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6f8      	b.n	8000bbe <__udivmoddi4+0x92>
 8000dcc:	454b      	cmp	r3, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f8>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f8>
 8000ddc:	4646      	mov	r6, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x28a>
 8000de0:	4620      	mov	r0, r4
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1e2>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x260>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b8>
 8000dec:	3b02      	subs	r3, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x12c>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e709      	b.n	8000c0a <__udivmoddi4+0xde>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x156>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000e18:	23aa      	movs	r3, #170	; 0xaa
 8000e1a:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000e1c:	8afa      	ldrh	r2, [r7, #22]
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	2316      	movs	r3, #22
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	463b      	mov	r3, r7
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	21ee      	movs	r1, #238	; 0xee
 8000e30:	4836      	ldr	r0, [pc, #216]	; (8000f0c <read_calliberation_data+0x10c>)
 8000e32:	f001 fb6f 	bl	8002514 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000e36:	783b      	ldrb	r3, [r7, #0]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	b21a      	sxth	r2, r3
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <read_calliberation_data+0x110>)
 8000e46:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000e48:	78bb      	ldrb	r3, [r7, #2]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <read_calliberation_data+0x114>)
 8000e58:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000e5a:	793b      	ldrb	r3, [r7, #4]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	797b      	ldrb	r3, [r7, #5]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <read_calliberation_data+0x118>)
 8000e6a:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <read_calliberation_data+0x11c>)
 8000e7e:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000e80:	7a3b      	ldrb	r3, [r7, #8]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	7a7b      	ldrb	r3, [r7, #9]
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <read_calliberation_data+0x120>)
 8000e92:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8000e94:	7abb      	ldrb	r3, [r7, #10]
 8000e96:	021b      	lsls	r3, r3, #8
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	7afb      	ldrb	r3, [r7, #11]
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	b21b      	sxth	r3, r3
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <read_calliberation_data+0x124>)
 8000ea6:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8000ea8:	7b3b      	ldrb	r3, [r7, #12]
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	b21a      	sxth	r2, r3
 8000eae:	7b7b      	ldrb	r3, [r7, #13]
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <read_calliberation_data+0x128>)
 8000eb8:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <read_calliberation_data+0x12c>)
 8000eca:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8000ecc:	7c3b      	ldrb	r3, [r7, #16]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	7c7b      	ldrb	r3, [r7, #17]
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <read_calliberation_data+0x130>)
 8000edc:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8000ede:	7cbb      	ldrb	r3, [r7, #18]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	7cfb      	ldrb	r3, [r7, #19]
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <read_calliberation_data+0x134>)
 8000eee:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8000ef0:	7d3b      	ldrb	r3, [r7, #20]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	7d7b      	ldrb	r3, [r7, #21]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <read_calliberation_data+0x138>)
 8000f00:	801a      	strh	r2, [r3, #0]

}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000114 	.word	0x20000114
 8000f10:	20000094 	.word	0x20000094
 8000f14:	20000096 	.word	0x20000096
 8000f18:	20000098 	.word	0x20000098
 8000f1c:	2000009a 	.word	0x2000009a
 8000f20:	2000009c 	.word	0x2000009c
 8000f24:	2000009e 	.word	0x2000009e
 8000f28:	200000a0 	.word	0x200000a0
 8000f2c:	200000a2 	.word	0x200000a2
 8000f30:	200000a4 	.word	0x200000a4
 8000f34:	200000a6 	.word	0x200000a6
 8000f38:	200000a8 	.word	0x200000a8

08000f3c <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 8000f42:	232e      	movs	r3, #46	; 0x2e
 8000f44:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 8000f46:	2300      	movs	r3, #0
 8000f48:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2301      	movs	r3, #1
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	22f4      	movs	r2, #244	; 0xf4
 8000f5c:	21ee      	movs	r1, #238	; 0xee
 8000f5e:	480f      	ldr	r0, [pc, #60]	; (8000f9c <Get_UTemp+0x60>)
 8000f60:	f001 f9de 	bl	8002320 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8000f64:	2005      	movs	r0, #5
 8000f66:	f000 fdf1 	bl	8001b4c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	9302      	str	r3, [sp, #8]
 8000f70:	2302      	movs	r3, #2
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	22f6      	movs	r2, #246	; 0xf6
 8000f7c:	21ee      	movs	r1, #238	; 0xee
 8000f7e:	4807      	ldr	r0, [pc, #28]	; (8000f9c <Get_UTemp+0x60>)
 8000f80:	f001 fac8 	bl	8002514 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8000f84:	793b      	ldrb	r3, [r7, #4]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	797b      	ldrb	r3, [r7, #5]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	4413      	add	r3, r2
 8000f92:	b29b      	uxth	r3, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000114 	.word	0x20000114

08000fa0 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8000fa4:	f7ff ffca 	bl	8000f3c <Get_UTemp>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <BMP180_GetTemp+0x108>)
 8000fae:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8000fb0:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <BMP180_GetTemp+0x108>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a3d      	ldr	r2, [pc, #244]	; (80010ac <BMP180_GetTemp+0x10c>)
 8000fb6:	8812      	ldrh	r2, [r2, #0]
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff faaa 	bl	8000514 <__aeabi_i2d>
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	460d      	mov	r5, r1
 8000fc4:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <BMP180_GetTemp+0x110>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff faa3 	bl	8000514 <__aeabi_i2d>
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <BMP180_GetTemp+0x114>)
 8000fd4:	f7ff fc32 	bl	800083c <__aeabi_ddiv>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4620      	mov	r0, r4
 8000fde:	4629      	mov	r1, r5
 8000fe0:	f7ff fb02 	bl	80005e8 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fd0e 	bl	8000a0c <__aeabi_d2iz>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <BMP180_GetTemp+0x118>)
 8000ff4:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8000ff6:	4b31      	ldr	r3, [pc, #196]	; (80010bc <BMP180_GetTemp+0x11c>)
 8000ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa89 	bl	8000514 <__aeabi_i2d>
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <BMP180_GetTemp+0x120>)
 8001008:	f7ff faee 	bl	80005e8 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4614      	mov	r4, r2
 8001012:	461d      	mov	r5, r3
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <BMP180_GetTemp+0x124>)
 8001016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101a:	461a      	mov	r2, r3
 800101c:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <BMP180_GetTemp+0x118>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fa76 	bl	8000514 <__aeabi_i2d>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4620      	mov	r0, r4
 800102e:	4629      	mov	r1, r5
 8001030:	f7ff fc04 	bl	800083c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fce6 	bl	8000a0c <__aeabi_d2iz>
 8001040:	4603      	mov	r3, r0
 8001042:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <BMP180_GetTemp+0x128>)
 8001044:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <BMP180_GetTemp+0x118>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <BMP180_GetTemp+0x128>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <BMP180_GetTemp+0x12c>)
 8001052:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <BMP180_GetTemp+0x12c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3308      	adds	r3, #8
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa5a 	bl	8000514 <__aeabi_i2d>
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <BMP180_GetTemp+0x130>)
 8001066:	f7ff fbe9 	bl	800083c <__aeabi_ddiv>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	f7ff fccb 	bl	8000a0c <__aeabi_d2iz>
 8001076:	4603      	mov	r3, r0
 8001078:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <BMP180_GetTemp+0x134>)
 800107a:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <BMP180_GetTemp+0x134>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa47 	bl	8000514 <__aeabi_i2d>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <BMP180_GetTemp+0x138>)
 800108c:	f7ff fbd6 	bl	800083c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fce0 	bl	8000a5c <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	ee07 3a90 	vmov	s15, r3
}
 80010a2:	eeb0 0a67 	vmov.f32	s0, s15
 80010a6:	bdb0      	pop	{r4, r5, r7, pc}
 80010a8:	200000ac 	.word	0x200000ac
 80010ac:	2000009e 	.word	0x2000009e
 80010b0:	2000009c 	.word	0x2000009c
 80010b4:	40e00000 	.word	0x40e00000
 80010b8:	200000b0 	.word	0x200000b0
 80010bc:	200000a6 	.word	0x200000a6
 80010c0:	40a00000 	.word	0x40a00000
 80010c4:	200000a8 	.word	0x200000a8
 80010c8:	200000b4 	.word	0x200000b4
 80010cc:	200000b8 	.word	0x200000b8
 80010d0:	40300000 	.word	0x40300000
 80010d4:	200000bc 	.word	0x200000bc
 80010d8:	40240000 	.word	0x40240000

080010dc <BMP180_Start>:
	BMP180_GetPress (oss);
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
}

void BMP180_Start (void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	read_calliberation_data();
 80010e0:	f7ff fe8e 	bl	8000e00 <read_calliberation_data>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ee:	f000 fcbb 	bl	8001a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f2:	f000 f849 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f6:	f000 f90d 	bl	8001314 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010fa:	f000 f8af 	bl	800125c <MX_I2C1_Init>
  MX_I2C2_Init();
 80010fe:	f000 f8db 	bl	80012b8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  BMP180_Start();
 8001102:	f7ff ffeb 	bl	80010dc <BMP180_Start>
  temperature = BMP180_GetTemp();
 8001106:	f7ff ff4b 	bl	8000fa0 <BMP180_GetTemp>
 800110a:	eef0 7a40 	vmov.f32	s15, s0
 800110e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001112:	edc7 7a01 	vstr	s15, [r7, #4]
 8001116:	793b      	ldrb	r3, [r7, #4]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <main+0x90>)
 800111c:	701a      	strb	r2, [r3, #0]
  ssd1306_Init();
 800111e:	f000 faa1 	bl	8001664 <ssd1306_Init>
  ssd1306_Fill(Black);
 8001122:	2000      	movs	r0, #0
 8001124:	f000 fb08 	bl	8001738 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8001128:	f000 fb2a 	bl	8001780 <ssd1306_UpdateScreen>
  HAL_Delay(10);
 800112c:	200a      	movs	r0, #10
 800112e:	f000 fd0d 	bl	8001b4c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  temperature = BMP180_GetTemp();
 8001132:	f7ff ff35 	bl	8000fa0 <BMP180_GetTemp>
 8001136:	eef0 7a40 	vmov.f32	s15, s0
 800113a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800113e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001142:	793b      	ldrb	r3, [r7, #4]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <main+0x90>)
 8001148:	701a      	strb	r2, [r3, #0]
	  sprintf(buff, "Temperature: %d C",temperature);
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <main+0x90>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	490a      	ldr	r1, [pc, #40]	; (800117c <main+0x94>)
 8001152:	480b      	ldr	r0, [pc, #44]	; (8001180 <main+0x98>)
 8001154:	f002 fc24 	bl	80039a0 <siprintf>
	  ssd1306_SetCursor(3, 25);
 8001158:	2119      	movs	r1, #25
 800115a:	2003      	movs	r0, #3
 800115c:	f000 fc3a 	bl	80019d4 <ssd1306_SetCursor>
	  ssd1306_WriteString(buff, Font_6x8, White);
 8001160:	4a08      	ldr	r2, [pc, #32]	; (8001184 <main+0x9c>)
 8001162:	2301      	movs	r3, #1
 8001164:	ca06      	ldmia	r2, {r1, r2}
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <main+0x98>)
 8001168:	f000 fc0e 	bl	8001988 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800116c:	f000 fb08 	bl	8001780 <ssd1306_UpdateScreen>
	  HAL_Delay(200);
 8001170:	20c8      	movs	r0, #200	; 0xc8
 8001172:	f000 fceb 	bl	8001b4c <HAL_Delay>
  {
 8001176:	e7dc      	b.n	8001132 <main+0x4a>
 8001178:	20000172 	.word	0x20000172
 800117c:	08004278 	.word	0x08004278
 8001180:	20000168 	.word	0x20000168
 8001184:	20000004 	.word	0x20000004

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fbfa 	bl	8003990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <SystemClock_Config+0xcc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a27      	ldr	r2, [pc, #156]	; (8001254 <SystemClock_Config+0xcc>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <SystemClock_Config+0xcc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <SystemClock_Config+0xd0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <SystemClock_Config+0xd0>)
 80011d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <SystemClock_Config+0xd0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ee:	2302      	movs	r3, #2
 80011f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011f8:	2304      	movs	r3, #4
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011fc:	23a8      	movs	r3, #168	; 0xa8
 80011fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001200:	2302      	movs	r3, #2
 8001202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001204:	2304      	movs	r3, #4
 8001206:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	4618      	mov	r0, r3
 800120e:	f001 ff03 	bl	8003018 <HAL_RCC_OscConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001218:	f000 f8a4 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	230f      	movs	r3, #15
 800121e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001220:	2302      	movs	r3, #2
 8001222:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001228:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800122c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800122e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001232:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2105      	movs	r1, #5
 800123a:	4618      	mov	r0, r3
 800123c:	f002 f964 	bl	8003508 <HAL_RCC_ClockConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001246:	f000 f88d 	bl	8001364 <Error_Handler>
  }
}
 800124a:	bf00      	nop
 800124c:	3750      	adds	r7, #80	; 0x50
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40007000 	.word	0x40007000

0800125c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_I2C1_Init+0x50>)
 8001262:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <MX_I2C1_Init+0x54>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_I2C1_Init+0x50>)
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <MX_I2C1_Init+0x58>)
 800126a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_I2C1_Init+0x50>)
 800127a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MX_I2C1_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_I2C1_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_I2C1_Init+0x50>)
 800129a:	f000 fefd 	bl	8002098 <HAL_I2C_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a4:	f000 f85e 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200000c0 	.word	0x200000c0
 80012b0:	40005400 	.word	0x40005400
 80012b4:	000186a0 	.word	0x000186a0

080012b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_I2C2_Init+0x50>)
 80012be:	4a13      	ldr	r2, [pc, #76]	; (800130c <MX_I2C2_Init+0x54>)
 80012c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_I2C2_Init+0x50>)
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_I2C2_Init+0x58>)
 80012c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_I2C2_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_I2C2_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_I2C2_Init+0x50>)
 80012d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <MX_I2C2_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_I2C2_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <MX_I2C2_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_I2C2_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_I2C2_Init+0x50>)
 80012f6:	f000 fecf 	bl	8002098 <HAL_I2C_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001300:	f000 f830 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000114 	.word	0x20000114
 800130c:	40005800 	.word	0x40005800
 8001310:	000186a0 	.word	0x000186a0

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_GPIO_Init+0x4c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <MX_GPIO_Init+0x4c>)
 8001324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <MX_GPIO_Init+0x4c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_GPIO_Init+0x4c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <MX_GPIO_Init+0x4c>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_GPIO_Init+0x4c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]

}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	e7fe      	b.n	800136c <Error_Handler+0x8>
	...

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <HAL_MspInit+0x4c>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_MspInit+0x4c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a33      	ldr	r2, [pc, #204]	; (80014ac <HAL_I2C_MspInit+0xec>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d12d      	bne.n	800143e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	4b32      	ldr	r3, [pc, #200]	; (80014b0 <HAL_I2C_MspInit+0xf0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a31      	ldr	r2, [pc, #196]	; (80014b0 <HAL_I2C_MspInit+0xf0>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <HAL_I2C_MspInit+0xf0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001404:	2312      	movs	r3, #18
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001410:	2304      	movs	r3, #4
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4826      	ldr	r0, [pc, #152]	; (80014b4 <HAL_I2C_MspInit+0xf4>)
 800141c:	f000 fca0 	bl	8001d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_I2C_MspInit+0xf0>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <HAL_I2C_MspInit+0xf0>)
 800142a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800142e:	6413      	str	r3, [r2, #64]	; 0x40
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <HAL_I2C_MspInit+0xf0>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800143c:	e031      	b.n	80014a2 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_I2C_MspInit+0xf8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d12c      	bne.n	80014a2 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_I2C_MspInit+0xf0>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <HAL_I2C_MspInit+0xf0>)
 8001452:	f043 0302 	orr.w	r3, r3, #2
 8001456:	6313      	str	r3, [r2, #48]	; 0x30
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_I2C_MspInit+0xf0>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001464:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146a:	2312      	movs	r3, #18
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001476:	2304      	movs	r3, #4
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <HAL_I2C_MspInit+0xf4>)
 8001482:	f000 fc6d 	bl	8001d60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_I2C_MspInit+0xf0>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_I2C_MspInit+0xf0>)
 8001490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_I2C_MspInit+0xf0>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
}
 80014a2:	bf00      	nop
 80014a4:	3730      	adds	r7, #48	; 0x30
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40005400 	.word	0x40005400
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40005800 	.word	0x40005800

080014bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <NMI_Handler+0x4>

080014c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <MemManage_Handler+0x4>

080014ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <UsageFault_Handler+0x4>

080014da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001508:	f000 fb00 	bl	8001b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f002 f9ee 	bl	8003920 <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20020000 	.word	0x20020000
 8001570:	00000400 	.word	0x00000400
 8001574:	20000174 	.word	0x20000174
 8001578:	20000598 	.word	0x20000598

0800157c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015a6:	490e      	ldr	r1, [pc, #56]	; (80015e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015bc:	4c0b      	ldr	r4, [pc, #44]	; (80015ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ca:	f7ff ffd7 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f002 f9ad 	bl	800392c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d2:	f7ff fd89 	bl	80010e8 <main>
  bx  lr    
 80015d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80015e4:	080048d8 	.word	0x080048d8
  ldr r2, =_sbss
 80015e8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80015ec:	20000594 	.word	0x20000594

080015f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC_IRQHandler>

080015f2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af04      	add	r7, sp, #16
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	2301      	movs	r3, #1
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	1dfb      	adds	r3, r7, #7
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	2200      	movs	r2, #0
 800161c:	2178      	movs	r1, #120	; 0x78
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <ssd1306_WriteCommand+0x2c>)
 8001620:	f000 fe7e 	bl	8002320 <HAL_I2C_Mem_Write>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200000c0 	.word	0x200000c0

08001630 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af04      	add	r7, sp, #16
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b29b      	uxth	r3, r3
 800163e:	f04f 32ff 	mov.w	r2, #4294967295
 8001642:	9202      	str	r2, [sp, #8]
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2301      	movs	r3, #1
 800164c:	2240      	movs	r2, #64	; 0x40
 800164e:	2178      	movs	r1, #120	; 0x78
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <ssd1306_WriteData+0x30>)
 8001652:	f000 fe65 	bl	8002320 <HAL_I2C_Mem_Write>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200000c0 	.word	0x200000c0

08001664 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001668:	f7ff ffc3 	bl	80015f2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800166c:	2064      	movs	r0, #100	; 0x64
 800166e:	f000 fa6d 	bl	8001b4c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f9da 	bl	8001a2c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001678:	2020      	movs	r0, #32
 800167a:	f7ff ffc1 	bl	8001600 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800167e:	2000      	movs	r0, #0
 8001680:	f7ff ffbe 	bl	8001600 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001684:	20b0      	movs	r0, #176	; 0xb0
 8001686:	f7ff ffbb 	bl	8001600 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800168a:	20c8      	movs	r0, #200	; 0xc8
 800168c:	f7ff ffb8 	bl	8001600 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff ffb5 	bl	8001600 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001696:	2010      	movs	r0, #16
 8001698:	f7ff ffb2 	bl	8001600 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800169c:	2040      	movs	r0, #64	; 0x40
 800169e:	f7ff ffaf 	bl	8001600 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80016a2:	20ff      	movs	r0, #255	; 0xff
 80016a4:	f000 f9ae 	bl	8001a04 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80016a8:	20a1      	movs	r0, #161	; 0xa1
 80016aa:	f7ff ffa9 	bl	8001600 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80016ae:	20a6      	movs	r0, #166	; 0xa6
 80016b0:	f7ff ffa6 	bl	8001600 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80016b4:	20a8      	movs	r0, #168	; 0xa8
 80016b6:	f7ff ffa3 	bl	8001600 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80016ba:	203f      	movs	r0, #63	; 0x3f
 80016bc:	f7ff ffa0 	bl	8001600 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80016c0:	20a4      	movs	r0, #164	; 0xa4
 80016c2:	f7ff ff9d 	bl	8001600 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80016c6:	20d3      	movs	r0, #211	; 0xd3
 80016c8:	f7ff ff9a 	bl	8001600 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7ff ff97 	bl	8001600 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80016d2:	20d5      	movs	r0, #213	; 0xd5
 80016d4:	f7ff ff94 	bl	8001600 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80016d8:	20f0      	movs	r0, #240	; 0xf0
 80016da:	f7ff ff91 	bl	8001600 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80016de:	20d9      	movs	r0, #217	; 0xd9
 80016e0:	f7ff ff8e 	bl	8001600 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80016e4:	2022      	movs	r0, #34	; 0x22
 80016e6:	f7ff ff8b 	bl	8001600 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80016ea:	20da      	movs	r0, #218	; 0xda
 80016ec:	f7ff ff88 	bl	8001600 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80016f0:	2012      	movs	r0, #18
 80016f2:	f7ff ff85 	bl	8001600 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80016f6:	20db      	movs	r0, #219	; 0xdb
 80016f8:	f7ff ff82 	bl	8001600 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80016fc:	2020      	movs	r0, #32
 80016fe:	f7ff ff7f 	bl	8001600 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001702:	208d      	movs	r0, #141	; 0x8d
 8001704:	f7ff ff7c 	bl	8001600 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001708:	2014      	movs	r0, #20
 800170a:	f7ff ff79 	bl	8001600 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800170e:	2001      	movs	r0, #1
 8001710:	f000 f98c 	bl	8001a2c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001714:	2000      	movs	r0, #0
 8001716:	f000 f80f 	bl	8001738 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800171a:	f000 f831 	bl	8001780 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <ssd1306_Init+0xd0>)
 8001720:	2200      	movs	r2, #0
 8001722:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <ssd1306_Init+0xd0>)
 8001726:	2200      	movs	r2, #0
 8001728:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800172a:	4b02      	ldr	r3, [pc, #8]	; (8001734 <ssd1306_Init+0xd0>)
 800172c:	2201      	movs	r2, #1
 800172e:	711a      	strb	r2, [r3, #4]
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000578 	.word	0x20000578

08001738 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e00d      	b.n	8001764 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <ssd1306_Fill+0x1a>
 800174e:	2100      	movs	r1, #0
 8001750:	e000      	b.n	8001754 <ssd1306_Fill+0x1c>
 8001752:	21ff      	movs	r1, #255	; 0xff
 8001754:	4a09      	ldr	r2, [pc, #36]	; (800177c <ssd1306_Fill+0x44>)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4413      	add	r3, r2
 800175a:	460a      	mov	r2, r1
 800175c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3301      	adds	r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176a:	d3ed      	bcc.n	8001748 <ssd1306_Fill+0x10>
    }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000178 	.word	0x20000178

08001780 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001786:	2300      	movs	r3, #0
 8001788:	71fb      	strb	r3, [r7, #7]
 800178a:	e016      	b.n	80017ba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	3b50      	subs	r3, #80	; 0x50
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff34 	bl	8001600 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff ff31 	bl	8001600 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800179e:	2010      	movs	r0, #16
 80017a0:	f7ff ff2e 	bl	8001600 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	01db      	lsls	r3, r3, #7
 80017a8:	4a08      	ldr	r2, [pc, #32]	; (80017cc <ssd1306_UpdateScreen+0x4c>)
 80017aa:	4413      	add	r3, r2
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff3e 	bl	8001630 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	3301      	adds	r3, #1
 80017b8:	71fb      	strb	r3, [r7, #7]
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2b07      	cmp	r3, #7
 80017be:	d9e5      	bls.n	800178c <ssd1306_UpdateScreen+0xc>
    }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000178 	.word	0x20000178

080017d0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	460b      	mov	r3, r1
 80017dc:	71bb      	strb	r3, [r7, #6]
 80017de:	4613      	mov	r3, r2
 80017e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db3d      	blt.n	8001866 <ssd1306_DrawPixel+0x96>
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	2b3f      	cmp	r3, #63	; 0x3f
 80017ee:	d83a      	bhi.n	8001866 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80017f0:	797b      	ldrb	r3, [r7, #5]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d11a      	bne.n	800182c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	79bb      	ldrb	r3, [r7, #6]
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	b2d8      	uxtb	r0, r3
 80017fe:	4603      	mov	r3, r0
 8001800:	01db      	lsls	r3, r3, #7
 8001802:	4413      	add	r3, r2
 8001804:	4a1b      	ldr	r2, [pc, #108]	; (8001874 <ssd1306_DrawPixel+0xa4>)
 8001806:	5cd3      	ldrb	r3, [r2, r3]
 8001808:	b25a      	sxtb	r2, r3
 800180a:	79bb      	ldrb	r3, [r7, #6]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	b25b      	sxtb	r3, r3
 8001818:	4313      	orrs	r3, r2
 800181a:	b259      	sxtb	r1, r3
 800181c:	79fa      	ldrb	r2, [r7, #7]
 800181e:	4603      	mov	r3, r0
 8001820:	01db      	lsls	r3, r3, #7
 8001822:	4413      	add	r3, r2
 8001824:	b2c9      	uxtb	r1, r1
 8001826:	4a13      	ldr	r2, [pc, #76]	; (8001874 <ssd1306_DrawPixel+0xa4>)
 8001828:	54d1      	strb	r1, [r2, r3]
 800182a:	e01d      	b.n	8001868 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800182c:	79fa      	ldrb	r2, [r7, #7]
 800182e:	79bb      	ldrb	r3, [r7, #6]
 8001830:	08db      	lsrs	r3, r3, #3
 8001832:	b2d8      	uxtb	r0, r3
 8001834:	4603      	mov	r3, r0
 8001836:	01db      	lsls	r3, r3, #7
 8001838:	4413      	add	r3, r2
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <ssd1306_DrawPixel+0xa4>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	b25a      	sxtb	r2, r3
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	b25b      	sxtb	r3, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	b25b      	sxtb	r3, r3
 8001852:	4013      	ands	r3, r2
 8001854:	b259      	sxtb	r1, r3
 8001856:	79fa      	ldrb	r2, [r7, #7]
 8001858:	4603      	mov	r3, r0
 800185a:	01db      	lsls	r3, r3, #7
 800185c:	4413      	add	r3, r2
 800185e:	b2c9      	uxtb	r1, r1
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <ssd1306_DrawPixel+0xa4>)
 8001862:	54d1      	strb	r1, [r2, r3]
 8001864:	e000      	b.n	8001868 <ssd1306_DrawPixel+0x98>
        return;
 8001866:	bf00      	nop
    }
}
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000178 	.word	0x20000178

08001878 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	4604      	mov	r4, r0
 8001880:	1d38      	adds	r0, r7, #4
 8001882:	e880 0006 	stmia.w	r0, {r1, r2}
 8001886:	461a      	mov	r2, r3
 8001888:	4623      	mov	r3, r4
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	4613      	mov	r3, r2
 800188e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	2b1f      	cmp	r3, #31
 8001894:	d902      	bls.n	800189c <ssd1306_WriteChar+0x24>
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	2b7e      	cmp	r3, #126	; 0x7e
 800189a:	d901      	bls.n	80018a0 <ssd1306_WriteChar+0x28>
        return 0;
 800189c:	2300      	movs	r3, #0
 800189e:	e06d      	b.n	800197c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80018a0:	4b38      	ldr	r3, [pc, #224]	; (8001984 <ssd1306_WriteChar+0x10c>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	793b      	ldrb	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	2b80      	cmp	r3, #128	; 0x80
 80018ac:	dc06      	bgt.n	80018bc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <ssd1306_WriteChar+0x10c>)
 80018b0:	885b      	ldrh	r3, [r3, #2]
 80018b2:	461a      	mov	r2, r3
 80018b4:	797b      	ldrb	r3, [r7, #5]
 80018b6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80018b8:	2b40      	cmp	r3, #64	; 0x40
 80018ba:	dd01      	ble.n	80018c0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	e05d      	b.n	800197c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	e04c      	b.n	8001960 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	3b20      	subs	r3, #32
 80018cc:	7979      	ldrb	r1, [r7, #5]
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4619      	mov	r1, r3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	440b      	add	r3, r1
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	e034      	b.n	8001950 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d012      	beq.n	800191c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <ssd1306_WriteChar+0x10c>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4413      	add	r3, r2
 8001902:	b2d8      	uxtb	r0, r3
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <ssd1306_WriteChar+0x10c>)
 8001906:	885b      	ldrh	r3, [r3, #2]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4413      	add	r3, r2
 8001910:	b2db      	uxtb	r3, r3
 8001912:	7bba      	ldrb	r2, [r7, #14]
 8001914:	4619      	mov	r1, r3
 8001916:	f7ff ff5b 	bl	80017d0 <ssd1306_DrawPixel>
 800191a:	e016      	b.n	800194a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <ssd1306_WriteChar+0x10c>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4413      	add	r3, r2
 8001928:	b2d8      	uxtb	r0, r3
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <ssd1306_WriteChar+0x10c>)
 800192c:	885b      	ldrh	r3, [r3, #2]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4413      	add	r3, r2
 8001936:	b2d9      	uxtb	r1, r3
 8001938:	7bbb      	ldrb	r3, [r7, #14]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf0c      	ite	eq
 800193e:	2301      	moveq	r3, #1
 8001940:	2300      	movne	r3, #0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	f7ff ff43 	bl	80017d0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	3301      	adds	r3, #1
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	793b      	ldrb	r3, [r7, #4]
 8001952:	461a      	mov	r2, r3
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	4293      	cmp	r3, r2
 8001958:	d3c5      	bcc.n	80018e6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3301      	adds	r3, #1
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	797b      	ldrb	r3, [r7, #5]
 8001962:	461a      	mov	r2, r3
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	4293      	cmp	r3, r2
 8001968:	d3ad      	bcc.n	80018c6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <ssd1306_WriteChar+0x10c>)
 800196c:	881a      	ldrh	r2, [r3, #0]
 800196e:	793b      	ldrb	r3, [r7, #4]
 8001970:	b29b      	uxth	r3, r3
 8001972:	4413      	add	r3, r2
 8001974:	b29a      	uxth	r2, r3
 8001976:	4b03      	ldr	r3, [pc, #12]	; (8001984 <ssd1306_WriteChar+0x10c>)
 8001978:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800197a:	7bfb      	ldrb	r3, [r7, #15]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3724      	adds	r7, #36	; 0x24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd90      	pop	{r4, r7, pc}
 8001984:	20000578 	.word	0x20000578

08001988 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	1d38      	adds	r0, r7, #4
 8001992:	e880 0006 	stmia.w	r0, {r1, r2}
 8001996:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001998:	e012      	b.n	80019c0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	7818      	ldrb	r0, [r3, #0]
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	1d3a      	adds	r2, r7, #4
 80019a2:	ca06      	ldmia	r2, {r1, r2}
 80019a4:	f7ff ff68 	bl	8001878 <ssd1306_WriteChar>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d002      	beq.n	80019ba <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	e008      	b.n	80019cc <ssd1306_WriteString+0x44>
        }
        str++;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3301      	adds	r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1e8      	bne.n	800199a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	781b      	ldrb	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	460a      	mov	r2, r1
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	4613      	mov	r3, r2
 80019e2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <ssd1306_SetCursor+0x2c>)
 80019ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80019ec:	79bb      	ldrb	r3, [r7, #6]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <ssd1306_SetCursor+0x2c>)
 80019f2:	805a      	strh	r2, [r3, #2]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	20000578 	.word	0x20000578

08001a04 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001a0e:	2381      	movs	r3, #129	; 0x81
 8001a10:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fdf3 	bl	8001600 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fdef 	bl	8001600 <ssd1306_WriteCommand>
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001a3c:	23af      	movs	r3, #175	; 0xaf
 8001a3e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <ssd1306_SetDisplayOn+0x38>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	715a      	strb	r2, [r3, #5]
 8001a46:	e004      	b.n	8001a52 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001a48:	23ae      	movs	r3, #174	; 0xae
 8001a4a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <ssd1306_SetDisplayOn+0x38>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fdd3 	bl	8001600 <ssd1306_WriteCommand>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000578 	.word	0x20000578

08001a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <HAL_Init+0x40>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <HAL_Init+0x40>)
 8001a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_Init+0x40>)
 8001a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <HAL_Init+0x40>)
 8001a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a90:	2003      	movs	r0, #3
 8001a92:	f000 f931 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a96:	200f      	movs	r0, #15
 8001a98:	f000 f808 	bl	8001aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a9c:	f7ff fc68 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023c00 	.word	0x40023c00

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x54>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x58>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f93b 	bl	8001d46 <HAL_SYSTICK_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00e      	b.n	8001af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b0f      	cmp	r3, #15
 8001ade:	d80a      	bhi.n	8001af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f000 f911 	bl	8001d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aec:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <HAL_InitTick+0x5c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e000      	b.n	8001af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000010 	.word	0x20000010
 8001b08:	2000000c 	.word	0x2000000c

08001b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x20>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x24>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_IncTick+0x24>)
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000010 	.word	0x20000010
 8001b30:	20000580 	.word	0x20000580

08001b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_GetTick+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000580 	.word	0x20000580

08001b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff ffee 	bl	8001b34 <HAL_GetTick>
 8001b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b64:	d005      	beq.n	8001b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_Delay+0x44>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b72:	bf00      	nop
 8001b74:	f7ff ffde 	bl	8001b34 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d8f7      	bhi.n	8001b74 <HAL_Delay+0x28>
  {
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000010 	.word	0x20000010

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	; (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc4:	d301      	bcc.n	8001cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00f      	b.n	8001cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <SysTick_Config+0x40>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f7ff ff8e 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <SysTick_Config+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SysTick_Config+0x40>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff47 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff5c 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff8e 	bl	8001c4c <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5d 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffb0 	bl	8001cb4 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e16b      	b.n	8002054 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f040 815a 	bne.w	800204e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d005      	beq.n	8001db2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d130      	bne.n	8001e14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de8:	2201      	movs	r2, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 0201 	and.w	r2, r3, #1
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d017      	beq.n	8001e50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d123      	bne.n	8001ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	08da      	lsrs	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3208      	adds	r2, #8
 8001e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	08da      	lsrs	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3208      	adds	r2, #8
 8001e9e:	69b9      	ldr	r1, [r7, #24]
 8001ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0203 	and.w	r2, r3, #3
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80b4 	beq.w	800204e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b60      	ldr	r3, [pc, #384]	; (800206c <HAL_GPIO_Init+0x30c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a5f      	ldr	r2, [pc, #380]	; (800206c <HAL_GPIO_Init+0x30c>)
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b5d      	ldr	r3, [pc, #372]	; (800206c <HAL_GPIO_Init+0x30c>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f02:	4a5b      	ldr	r2, [pc, #364]	; (8002070 <HAL_GPIO_Init+0x310>)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	220f      	movs	r2, #15
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a52      	ldr	r2, [pc, #328]	; (8002074 <HAL_GPIO_Init+0x314>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02b      	beq.n	8001f86 <HAL_GPIO_Init+0x226>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a51      	ldr	r2, [pc, #324]	; (8002078 <HAL_GPIO_Init+0x318>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d025      	beq.n	8001f82 <HAL_GPIO_Init+0x222>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a50      	ldr	r2, [pc, #320]	; (800207c <HAL_GPIO_Init+0x31c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01f      	beq.n	8001f7e <HAL_GPIO_Init+0x21e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4f      	ldr	r2, [pc, #316]	; (8002080 <HAL_GPIO_Init+0x320>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d019      	beq.n	8001f7a <HAL_GPIO_Init+0x21a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4e      	ldr	r2, [pc, #312]	; (8002084 <HAL_GPIO_Init+0x324>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0x216>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4d      	ldr	r2, [pc, #308]	; (8002088 <HAL_GPIO_Init+0x328>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x212>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4c      	ldr	r2, [pc, #304]	; (800208c <HAL_GPIO_Init+0x32c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x20e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4b      	ldr	r2, [pc, #300]	; (8002090 <HAL_GPIO_Init+0x330>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x20a>
 8001f66:	2307      	movs	r3, #7
 8001f68:	e00e      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	e00c      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f6e:	2306      	movs	r3, #6
 8001f70:	e00a      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f72:	2305      	movs	r3, #5
 8001f74:	e008      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f76:	2304      	movs	r3, #4
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e004      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_GPIO_Init+0x228>
 8001f86:	2300      	movs	r3, #0
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	f002 0203 	and.w	r2, r2, #3
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	4093      	lsls	r3, r2
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f98:	4935      	ldr	r1, [pc, #212]	; (8002070 <HAL_GPIO_Init+0x310>)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <HAL_GPIO_Init+0x334>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fca:	4a32      	ldr	r2, [pc, #200]	; (8002094 <HAL_GPIO_Init+0x334>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd0:	4b30      	ldr	r3, [pc, #192]	; (8002094 <HAL_GPIO_Init+0x334>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff4:	4a27      	ldr	r2, [pc, #156]	; (8002094 <HAL_GPIO_Init+0x334>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <HAL_GPIO_Init+0x334>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800201e:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <HAL_GPIO_Init+0x334>)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_GPIO_Init+0x334>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002048:	4a12      	ldr	r2, [pc, #72]	; (8002094 <HAL_GPIO_Init+0x334>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	f67f ae90 	bls.w	8001d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	40013800 	.word	0x40013800
 8002074:	40020000 	.word	0x40020000
 8002078:	40020400 	.word	0x40020400
 800207c:	40020800 	.word	0x40020800
 8002080:	40020c00 	.word	0x40020c00
 8002084:	40021000 	.word	0x40021000
 8002088:	40021400 	.word	0x40021400
 800208c:	40021800 	.word	0x40021800
 8002090:	40021c00 	.word	0x40021c00
 8002094:	40013c00 	.word	0x40013c00

08002098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e12b      	b.n	8002302 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff f97e 	bl	80013c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2224      	movs	r2, #36	; 0x24
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020fc:	f001 fbfc 	bl	80038f8 <HAL_RCC_GetPCLK1Freq>
 8002100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4a81      	ldr	r2, [pc, #516]	; (800230c <HAL_I2C_Init+0x274>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d807      	bhi.n	800211c <HAL_I2C_Init+0x84>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4a80      	ldr	r2, [pc, #512]	; (8002310 <HAL_I2C_Init+0x278>)
 8002110:	4293      	cmp	r3, r2
 8002112:	bf94      	ite	ls
 8002114:	2301      	movls	r3, #1
 8002116:	2300      	movhi	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	e006      	b.n	800212a <HAL_I2C_Init+0x92>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a7d      	ldr	r2, [pc, #500]	; (8002314 <HAL_I2C_Init+0x27c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	bf94      	ite	ls
 8002124:	2301      	movls	r3, #1
 8002126:	2300      	movhi	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0e7      	b.n	8002302 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4a78      	ldr	r2, [pc, #480]	; (8002318 <HAL_I2C_Init+0x280>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0c9b      	lsrs	r3, r3, #18
 800213c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	430a      	orrs	r2, r1
 8002150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4a6a      	ldr	r2, [pc, #424]	; (800230c <HAL_I2C_Init+0x274>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d802      	bhi.n	800216c <HAL_I2C_Init+0xd4>
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	3301      	adds	r3, #1
 800216a:	e009      	b.n	8002180 <HAL_I2C_Init+0xe8>
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	4a69      	ldr	r2, [pc, #420]	; (800231c <HAL_I2C_Init+0x284>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	3301      	adds	r3, #1
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	430b      	orrs	r3, r1
 8002186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002192:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	495c      	ldr	r1, [pc, #368]	; (800230c <HAL_I2C_Init+0x274>)
 800219c:	428b      	cmp	r3, r1
 800219e:	d819      	bhi.n	80021d4 <HAL_I2C_Init+0x13c>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1e59      	subs	r1, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ae:	1c59      	adds	r1, r3, #1
 80021b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021b4:	400b      	ands	r3, r1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_I2C_Init+0x138>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1e59      	subs	r1, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021c8:	3301      	adds	r3, #1
 80021ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ce:	e051      	b.n	8002274 <HAL_I2C_Init+0x1dc>
 80021d0:	2304      	movs	r3, #4
 80021d2:	e04f      	b.n	8002274 <HAL_I2C_Init+0x1dc>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d111      	bne.n	8002200 <HAL_I2C_Init+0x168>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1e58      	subs	r0, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6859      	ldr	r1, [r3, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	440b      	add	r3, r1
 80021ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ee:	3301      	adds	r3, #1
 80021f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	e012      	b.n	8002226 <HAL_I2C_Init+0x18e>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1e58      	subs	r0, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	0099      	lsls	r1, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	fbb0 f3f3 	udiv	r3, r0, r3
 8002216:	3301      	adds	r3, #1
 8002218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_Init+0x196>
 800222a:	2301      	movs	r3, #1
 800222c:	e022      	b.n	8002274 <HAL_I2C_Init+0x1dc>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10e      	bne.n	8002254 <HAL_I2C_Init+0x1bc>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1e58      	subs	r0, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6859      	ldr	r1, [r3, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	440b      	add	r3, r1
 8002244:	fbb0 f3f3 	udiv	r3, r0, r3
 8002248:	3301      	adds	r3, #1
 800224a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800224e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002252:	e00f      	b.n	8002274 <HAL_I2C_Init+0x1dc>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1e58      	subs	r0, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	0099      	lsls	r1, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	fbb0 f3f3 	udiv	r3, r0, r3
 800226a:	3301      	adds	r3, #1
 800226c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	6809      	ldr	r1, [r1, #0]
 8002278:	4313      	orrs	r3, r2
 800227a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69da      	ldr	r2, [r3, #28]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6911      	ldr	r1, [r2, #16]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68d2      	ldr	r2, [r2, #12]
 80022ae:	4311      	orrs	r1, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2220      	movs	r2, #32
 80022ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	000186a0 	.word	0x000186a0
 8002310:	001e847f 	.word	0x001e847f
 8002314:	003d08ff 	.word	0x003d08ff
 8002318:	431bde83 	.word	0x431bde83
 800231c:	10624dd3 	.word	0x10624dd3

08002320 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	4608      	mov	r0, r1
 800232a:	4611      	mov	r1, r2
 800232c:	461a      	mov	r2, r3
 800232e:	4603      	mov	r3, r0
 8002330:	817b      	strh	r3, [r7, #10]
 8002332:	460b      	mov	r3, r1
 8002334:	813b      	strh	r3, [r7, #8]
 8002336:	4613      	mov	r3, r2
 8002338:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800233a:	f7ff fbfb 	bl	8001b34 <HAL_GetTick>
 800233e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b20      	cmp	r3, #32
 800234a:	f040 80d9 	bne.w	8002500 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2319      	movs	r3, #25
 8002354:	2201      	movs	r2, #1
 8002356:	496d      	ldr	r1, [pc, #436]	; (800250c <HAL_I2C_Mem_Write+0x1ec>)
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fc7f 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002364:	2302      	movs	r3, #2
 8002366:	e0cc      	b.n	8002502 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_I2C_Mem_Write+0x56>
 8002372:	2302      	movs	r3, #2
 8002374:	e0c5      	b.n	8002502 <HAL_I2C_Mem_Write+0x1e2>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d007      	beq.n	800239c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2221      	movs	r2, #33	; 0x21
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4a4d      	ldr	r2, [pc, #308]	; (8002510 <HAL_I2C_Mem_Write+0x1f0>)
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023de:	88f8      	ldrh	r0, [r7, #6]
 80023e0:	893a      	ldrh	r2, [r7, #8]
 80023e2:	8979      	ldrh	r1, [r7, #10]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	4603      	mov	r3, r0
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fab6 	bl	8002960 <I2C_RequestMemoryWrite>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d052      	beq.n	80024a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e081      	b.n	8002502 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fd00 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00d      	beq.n	800242a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2b04      	cmp	r3, #4
 8002414:	d107      	bne.n	8002426 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002424:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06b      	b.n	8002502 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	781a      	ldrb	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b04      	cmp	r3, #4
 8002466:	d11b      	bne.n	80024a0 <HAL_I2C_Mem_Write+0x180>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d017      	beq.n	80024a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	781a      	ldrb	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1aa      	bne.n	80023fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fcec 	bl	8002e8a <I2C_WaitOnBTFFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00d      	beq.n	80024d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d107      	bne.n	80024d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e016      	b.n	8002502 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e000      	b.n	8002502 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002500:	2302      	movs	r3, #2
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	00100002 	.word	0x00100002
 8002510:	ffff0000 	.word	0xffff0000

08002514 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	4608      	mov	r0, r1
 800251e:	4611      	mov	r1, r2
 8002520:	461a      	mov	r2, r3
 8002522:	4603      	mov	r3, r0
 8002524:	817b      	strh	r3, [r7, #10]
 8002526:	460b      	mov	r3, r1
 8002528:	813b      	strh	r3, [r7, #8]
 800252a:	4613      	mov	r3, r2
 800252c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800252e:	f7ff fb01 	bl	8001b34 <HAL_GetTick>
 8002532:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b20      	cmp	r3, #32
 800253e:	f040 8208 	bne.w	8002952 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2319      	movs	r3, #25
 8002548:	2201      	movs	r2, #1
 800254a:	497b      	ldr	r1, [pc, #492]	; (8002738 <HAL_I2C_Mem_Read+0x224>)
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fb85 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
 800255a:	e1fb      	b.n	8002954 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_I2C_Mem_Read+0x56>
 8002566:	2302      	movs	r3, #2
 8002568:	e1f4      	b.n	8002954 <HAL_I2C_Mem_Read+0x440>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d007      	beq.n	8002590 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800259e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2222      	movs	r2, #34	; 0x22
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2240      	movs	r2, #64	; 0x40
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a5b      	ldr	r2, [pc, #364]	; (800273c <HAL_I2C_Mem_Read+0x228>)
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025d2:	88f8      	ldrh	r0, [r7, #6]
 80025d4:	893a      	ldrh	r2, [r7, #8]
 80025d6:	8979      	ldrh	r1, [r7, #10]
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4603      	mov	r3, r0
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fa52 	bl	8002a8c <I2C_RequestMemoryRead>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1b0      	b.n	8002954 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d113      	bne.n	8002622 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	623b      	str	r3, [r7, #32]
 800260e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e184      	b.n	800292c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	2b01      	cmp	r3, #1
 8002628:	d11b      	bne.n	8002662 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002638:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e164      	b.n	800292c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002666:	2b02      	cmp	r3, #2
 8002668:	d11b      	bne.n	80026a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002678:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002688:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	e144      	b.n	800292c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026b8:	e138      	b.n	800292c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026be:	2b03      	cmp	r3, #3
 80026c0:	f200 80f1 	bhi.w	80028a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d123      	bne.n	8002714 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fc1b 	bl	8002f0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e139      	b.n	8002954 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002712:	e10b      	b.n	800292c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002718:	2b02      	cmp	r3, #2
 800271a:	d14e      	bne.n	80027ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002722:	2200      	movs	r2, #0
 8002724:	4906      	ldr	r1, [pc, #24]	; (8002740 <HAL_I2C_Mem_Read+0x22c>)
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fa98 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e10e      	b.n	8002954 <HAL_I2C_Mem_Read+0x440>
 8002736:	bf00      	nop
 8002738:	00100002 	.word	0x00100002
 800273c:	ffff0000 	.word	0xffff0000
 8002740:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002752:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027b8:	e0b8      	b.n	800292c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c0:	2200      	movs	r2, #0
 80027c2:	4966      	ldr	r1, [pc, #408]	; (800295c <HAL_I2C_Mem_Read+0x448>)
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fa49 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0bf      	b.n	8002954 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281c:	2200      	movs	r2, #0
 800281e:	494f      	ldr	r1, [pc, #316]	; (800295c <HAL_I2C_Mem_Read+0x448>)
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fa1b 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e091      	b.n	8002954 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028a4:	e042      	b.n	800292c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fb2e 	bl	8002f0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e04c      	b.n	8002954 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d118      	bne.n	800292c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	2b00      	cmp	r3, #0
 8002932:	f47f aec2 	bne.w	80026ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e000      	b.n	8002954 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
  }
}
 8002954:	4618      	mov	r0, r3
 8002956:	3728      	adds	r7, #40	; 0x28
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	00010004 	.word	0x00010004

08002960 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	4608      	mov	r0, r1
 800296a:	4611      	mov	r1, r2
 800296c:	461a      	mov	r2, r3
 800296e:	4603      	mov	r3, r0
 8002970:	817b      	strh	r3, [r7, #10]
 8002972:	460b      	mov	r3, r1
 8002974:	813b      	strh	r3, [r7, #8]
 8002976:	4613      	mov	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002988:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	2200      	movs	r2, #0
 8002992:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f960 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b0:	d103      	bne.n	80029ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e05f      	b.n	8002a7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029be:	897b      	ldrh	r3, [r7, #10]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	492d      	ldr	r1, [pc, #180]	; (8002a88 <I2C_RequestMemoryWrite+0x128>)
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f998 	bl	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e04c      	b.n	8002a7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	6a39      	ldr	r1, [r7, #32]
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fa02 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d107      	bne.n	8002a22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e02b      	b.n	8002a7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d105      	bne.n	8002a38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a2c:	893b      	ldrh	r3, [r7, #8]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	611a      	str	r2, [r3, #16]
 8002a36:	e021      	b.n	8002a7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	6a39      	ldr	r1, [r7, #32]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f9dc 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d107      	bne.n	8002a6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e005      	b.n	8002a7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a72:	893b      	ldrh	r3, [r7, #8]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	00010002 	.word	0x00010002

08002a8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	4608      	mov	r0, r1
 8002a96:	4611      	mov	r1, r2
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	817b      	strh	r3, [r7, #10]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	813b      	strh	r3, [r7, #8]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ab4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f8c2 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aec:	d103      	bne.n	8002af6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e0aa      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002afa:	897b      	ldrh	r3, [r7, #10]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	6a3a      	ldr	r2, [r7, #32]
 8002b0e:	4952      	ldr	r1, [pc, #328]	; (8002c58 <I2C_RequestMemoryRead+0x1cc>)
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f8fa 	bl	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e097      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	6a39      	ldr	r1, [r7, #32]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f964 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d107      	bne.n	8002b5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e076      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b68:	893b      	ldrh	r3, [r7, #8]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	611a      	str	r2, [r3, #16]
 8002b72:	e021      	b.n	8002bb8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b74:	893b      	ldrh	r3, [r7, #8]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	6a39      	ldr	r1, [r7, #32]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f93e 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d107      	bne.n	8002baa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e050      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bae:	893b      	ldrh	r3, [r7, #8]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bba:	6a39      	ldr	r1, [r7, #32]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f923 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d107      	bne.n	8002be0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bde:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e035      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f82b 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1a:	d103      	bne.n	8002c24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e013      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c28:	897b      	ldrh	r3, [r7, #10]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	6a3a      	ldr	r2, [r7, #32]
 8002c3c:	4906      	ldr	r1, [pc, #24]	; (8002c58 <I2C_RequestMemoryRead+0x1cc>)
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f863 	bl	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	00010002 	.word	0x00010002

08002c5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c6c:	e025      	b.n	8002cba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d021      	beq.n	8002cba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c76:	f7fe ff5d 	bl	8001b34 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d302      	bcc.n	8002c8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d116      	bne.n	8002cba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f043 0220 	orr.w	r2, r3, #32
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e023      	b.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d10d      	bne.n	8002ce0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2301      	moveq	r3, #1
 8002cd8:	2300      	movne	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	e00c      	b.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4013      	ands	r3, r2
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d0b6      	beq.n	8002c6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d18:	e051      	b.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d28:	d123      	bne.n	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f043 0204 	orr.w	r2, r3, #4
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e046      	b.n	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d021      	beq.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	f7fe fedb 	bl	8001b34 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d116      	bne.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e020      	b.n	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10c      	bne.n	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bf14      	ite	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	2300      	moveq	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e00b      	b.n	8002dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	43da      	mvns	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4013      	ands	r3, r2
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf14      	ite	ne
 8002df4:	2301      	movne	r3, #1
 8002df6:	2300      	moveq	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d18d      	bne.n	8002d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e14:	e02d      	b.n	8002e72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f8ce 	bl	8002fb8 <I2C_IsAcknowledgeFailed>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e02d      	b.n	8002e82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d021      	beq.n	8002e72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2e:	f7fe fe81 	bl	8001b34 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d302      	bcc.n	8002e44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d116      	bne.n	8002e72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f043 0220 	orr.w	r2, r3, #32
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e007      	b.n	8002e82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7c:	2b80      	cmp	r3, #128	; 0x80
 8002e7e:	d1ca      	bne.n	8002e16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e96:	e02d      	b.n	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f88d 	bl	8002fb8 <I2C_IsAcknowledgeFailed>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e02d      	b.n	8002f04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d021      	beq.n	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb0:	f7fe fe40 	bl	8001b34 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d302      	bcc.n	8002ec6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d116      	bne.n	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e007      	b.n	8002f04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d1ca      	bne.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f18:	e042      	b.n	8002fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d119      	bne.n	8002f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0210 	mvn.w	r2, #16
 8002f30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e029      	b.n	8002fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5c:	f7fe fdea 	bl	8001b34 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d302      	bcc.n	8002f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d116      	bne.n	8002fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e007      	b.n	8002fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b40      	cmp	r3, #64	; 0x40
 8002fac:	d1b5      	bne.n	8002f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fce:	d11b      	bne.n	8003008 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f043 0204 	orr.w	r2, r3, #4
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e267      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d075      	beq.n	8003122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003036:	4b88      	ldr	r3, [pc, #544]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d00c      	beq.n	800305c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b85      	ldr	r3, [pc, #532]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800304a:	2b08      	cmp	r3, #8
 800304c:	d112      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304e:	4b82      	ldr	r3, [pc, #520]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305a:	d10b      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	4b7e      	ldr	r3, [pc, #504]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d05b      	beq.n	8003120 <HAL_RCC_OscConfig+0x108>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d157      	bne.n	8003120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e242      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307c:	d106      	bne.n	800308c <HAL_RCC_OscConfig+0x74>
 800307e:	4b76      	ldr	r3, [pc, #472]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a75      	ldr	r2, [pc, #468]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e01d      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x98>
 8003096:	4b70      	ldr	r3, [pc, #448]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6f      	ldr	r2, [pc, #444]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 800309c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b6d      	ldr	r3, [pc, #436]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a6c      	ldr	r2, [pc, #432]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 80030b0:	4b69      	ldr	r3, [pc, #420]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a68      	ldr	r2, [pc, #416]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b66      	ldr	r3, [pc, #408]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a65      	ldr	r2, [pc, #404]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe fd30 	bl	8001b34 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fe fd2c 	bl	8001b34 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e207      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b5b      	ldr	r3, [pc, #364]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0xc0>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fe fd1c 	bl	8001b34 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003100:	f7fe fd18 	bl	8001b34 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1f3      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003112:	4b51      	ldr	r3, [pc, #324]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0xe8>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d063      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800312e:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003142:	2b08      	cmp	r3, #8
 8003144:	d11c      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b44      	ldr	r3, [pc, #272]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	4b41      	ldr	r3, [pc, #260]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e1c7      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4937      	ldr	r1, [pc, #220]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	e03a      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003188:	4b34      	ldr	r3, [pc, #208]	; (800325c <HAL_RCC_OscConfig+0x244>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fe fcd1 	bl	8001b34 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003196:	f7fe fccd 	bl	8001b34 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e1a8      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a8:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4925      	ldr	r1, [pc, #148]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_RCC_OscConfig+0x244>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe fcb0 	bl	8001b34 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fe fcac 	bl	8001b34 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e187      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ea:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d036      	beq.n	8003270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_RCC_OscConfig+0x248>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe fc90 	bl	8001b34 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003218:	f7fe fc8c 	bl	8001b34 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e167      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_OscConfig+0x240>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x200>
 8003236:	e01b      	b.n	8003270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <HAL_RCC_OscConfig+0x248>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fe fc79 	bl	8001b34 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	e00e      	b.n	8003264 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003246:	f7fe fc75 	bl	8001b34 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d907      	bls.n	8003264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e150      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
 8003258:	40023800 	.word	0x40023800
 800325c:	42470000 	.word	0x42470000
 8003260:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	4b88      	ldr	r3, [pc, #544]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ea      	bne.n	8003246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8097 	beq.w	80033ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003282:	4b81      	ldr	r3, [pc, #516]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10f      	bne.n	80032ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	4b7d      	ldr	r3, [pc, #500]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	4a7c      	ldr	r2, [pc, #496]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	; 0x40
 800329e:	4b7a      	ldr	r3, [pc, #488]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b77      	ldr	r3, [pc, #476]	; (800348c <HAL_RCC_OscConfig+0x474>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d118      	bne.n	80032ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ba:	4b74      	ldr	r3, [pc, #464]	; (800348c <HAL_RCC_OscConfig+0x474>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a73      	ldr	r2, [pc, #460]	; (800348c <HAL_RCC_OscConfig+0x474>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c6:	f7fe fc35 	bl	8001b34 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fe fc31 	bl	8001b34 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e10c      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	4b6a      	ldr	r3, [pc, #424]	; (800348c <HAL_RCC_OscConfig+0x474>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x2ea>
 80032f4:	4b64      	ldr	r3, [pc, #400]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	4a63      	ldr	r2, [pc, #396]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003300:	e01c      	b.n	800333c <HAL_RCC_OscConfig+0x324>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b05      	cmp	r3, #5
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x30c>
 800330a:	4b5f      	ldr	r3, [pc, #380]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4a5e      	ldr	r2, [pc, #376]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	6713      	str	r3, [r2, #112]	; 0x70
 8003316:	4b5c      	ldr	r3, [pc, #368]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	4a5b      	ldr	r2, [pc, #364]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6713      	str	r3, [r2, #112]	; 0x70
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0x324>
 8003324:	4b58      	ldr	r3, [pc, #352]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	4a57      	ldr	r2, [pc, #348]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	6713      	str	r3, [r2, #112]	; 0x70
 8003330:	4b55      	ldr	r3, [pc, #340]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	4a54      	ldr	r2, [pc, #336]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003336:	f023 0304 	bic.w	r3, r3, #4
 800333a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d015      	beq.n	8003370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fe fbf6 	bl	8001b34 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fe fbf2 	bl	8001b34 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0cb      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003362:	4b49      	ldr	r3, [pc, #292]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0ee      	beq.n	800334c <HAL_RCC_OscConfig+0x334>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003370:	f7fe fbe0 	bl	8001b34 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fe fbdc 	bl	8001b34 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0b5      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338e:	4b3e      	ldr	r3, [pc, #248]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ee      	bne.n	8003378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b39      	ldr	r3, [pc, #228]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	4a38      	ldr	r2, [pc, #224]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80a1 	beq.w	80034f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b6:	4b34      	ldr	r3, [pc, #208]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d05c      	beq.n	800347c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d141      	bne.n	800344e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4b31      	ldr	r3, [pc, #196]	; (8003490 <HAL_RCC_OscConfig+0x478>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fe fbb0 	bl	8001b34 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe fbac 	bl	8001b34 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e087      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	4b27      	ldr	r3, [pc, #156]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	019b      	lsls	r3, r3, #6
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	3b01      	subs	r3, #1
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	061b      	lsls	r3, r3, #24
 800341a:	491b      	ldr	r1, [pc, #108]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_RCC_OscConfig+0x478>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe fb85 	bl	8001b34 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342e:	f7fe fb81 	bl	8001b34 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e05c      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x416>
 800344c:	e054      	b.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_RCC_OscConfig+0x478>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fb6e 	bl	8001b34 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345c:	f7fe fb6a 	bl	8001b34 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e045      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_RCC_OscConfig+0x470>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x444>
 800347a:	e03d      	b.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e038      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
 8003488:	40023800 	.word	0x40023800
 800348c:	40007000 	.word	0x40007000
 8003490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x4ec>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d028      	beq.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d121      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d11a      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034c4:	4013      	ands	r3, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d111      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	3b01      	subs	r3, #1
 80034de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800

08003508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0cc      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800351c:	4b68      	ldr	r3, [pc, #416]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d90c      	bls.n	8003544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b65      	ldr	r3, [pc, #404]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800357e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d044      	beq.n	8003628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d119      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	4b3f      	ldr	r3, [pc, #252]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e06f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e067      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4934      	ldr	r1, [pc, #208]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f8:	f7fe fa9c 	bl	8001b34 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fe fa98 	bl	8001b34 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e04f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003628:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d20c      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4602      	mov	r2, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	490a      	ldr	r1, [pc, #40]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	5ccb      	ldrb	r3, [r1, r3]
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1c8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe f9fc 	bl	8001aac <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023c00 	.word	0x40023c00
 80036c4:	40023800 	.word	0x40023800
 80036c8:	0800428c 	.word	0x0800428c
 80036cc:	20000000 	.word	0x20000000
 80036d0:	2000000c 	.word	0x2000000c

080036d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d8:	b094      	sub	sp, #80	; 0x50
 80036da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	647b      	str	r3, [r7, #68]	; 0x44
 80036e0:	2300      	movs	r3, #0
 80036e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e4:	2300      	movs	r3, #0
 80036e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ec:	4b79      	ldr	r3, [pc, #484]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d00d      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x40>
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	f200 80e1 	bhi.w	80038c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x34>
 8003702:	2b04      	cmp	r3, #4
 8003704:	d003      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x3a>
 8003706:	e0db      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b73      	ldr	r3, [pc, #460]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800370a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800370c:	e0db      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800370e:	4b73      	ldr	r3, [pc, #460]	; (80038dc <HAL_RCC_GetSysClockFreq+0x208>)
 8003710:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003712:	e0d8      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003714:	4b6f      	ldr	r3, [pc, #444]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800371c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800371e:	4b6d      	ldr	r3, [pc, #436]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d063      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372a:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	2200      	movs	r2, #0
 8003732:	63bb      	str	r3, [r7, #56]	; 0x38
 8003734:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373c:	633b      	str	r3, [r7, #48]	; 0x30
 800373e:	2300      	movs	r3, #0
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
 8003742:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003746:	4622      	mov	r2, r4
 8003748:	462b      	mov	r3, r5
 800374a:	f04f 0000 	mov.w	r0, #0
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	0159      	lsls	r1, r3, #5
 8003754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003758:	0150      	lsls	r0, r2, #5
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4621      	mov	r1, r4
 8003760:	1a51      	subs	r1, r2, r1
 8003762:	6139      	str	r1, [r7, #16]
 8003764:	4629      	mov	r1, r5
 8003766:	eb63 0301 	sbc.w	r3, r3, r1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003778:	4659      	mov	r1, fp
 800377a:	018b      	lsls	r3, r1, #6
 800377c:	4651      	mov	r1, sl
 800377e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003782:	4651      	mov	r1, sl
 8003784:	018a      	lsls	r2, r1, #6
 8003786:	4651      	mov	r1, sl
 8003788:	ebb2 0801 	subs.w	r8, r2, r1
 800378c:	4659      	mov	r1, fp
 800378e:	eb63 0901 	sbc.w	r9, r3, r1
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800379e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037a6:	4690      	mov	r8, r2
 80037a8:	4699      	mov	r9, r3
 80037aa:	4623      	mov	r3, r4
 80037ac:	eb18 0303 	adds.w	r3, r8, r3
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	462b      	mov	r3, r5
 80037b4:	eb49 0303 	adc.w	r3, r9, r3
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037c6:	4629      	mov	r1, r5
 80037c8:	024b      	lsls	r3, r1, #9
 80037ca:	4621      	mov	r1, r4
 80037cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037d0:	4621      	mov	r1, r4
 80037d2:	024a      	lsls	r2, r1, #9
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037da:	2200      	movs	r2, #0
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80037de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037e4:	f7fd f98a 	bl	8000afc <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4613      	mov	r3, r2
 80037ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f0:	e058      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f2:	4b38      	ldr	r3, [pc, #224]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	2200      	movs	r2, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	4611      	mov	r1, r2
 80037fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003802:	623b      	str	r3, [r7, #32]
 8003804:	2300      	movs	r3, #0
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
 8003808:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800380c:	4642      	mov	r2, r8
 800380e:	464b      	mov	r3, r9
 8003810:	f04f 0000 	mov.w	r0, #0
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	0159      	lsls	r1, r3, #5
 800381a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800381e:	0150      	lsls	r0, r2, #5
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4641      	mov	r1, r8
 8003826:	ebb2 0a01 	subs.w	sl, r2, r1
 800382a:	4649      	mov	r1, r9
 800382c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800383c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003840:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003844:	ebb2 040a 	subs.w	r4, r2, sl
 8003848:	eb63 050b 	sbc.w	r5, r3, fp
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	00eb      	lsls	r3, r5, #3
 8003856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800385a:	00e2      	lsls	r2, r4, #3
 800385c:	4614      	mov	r4, r2
 800385e:	461d      	mov	r5, r3
 8003860:	4643      	mov	r3, r8
 8003862:	18e3      	adds	r3, r4, r3
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	464b      	mov	r3, r9
 8003868:	eb45 0303 	adc.w	r3, r5, r3
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800387a:	4629      	mov	r1, r5
 800387c:	028b      	lsls	r3, r1, #10
 800387e:	4621      	mov	r1, r4
 8003880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003884:	4621      	mov	r1, r4
 8003886:	028a      	lsls	r2, r1, #10
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800388e:	2200      	movs	r2, #0
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	61fa      	str	r2, [r7, #28]
 8003894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003898:	f7fd f930 	bl	8000afc <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4613      	mov	r3, r2
 80038a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	3301      	adds	r3, #1
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038be:	e002      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3750      	adds	r7, #80	; 0x50
 80038cc:	46bd      	mov	sp, r7
 80038ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	00f42400 	.word	0x00f42400
 80038dc:	007a1200 	.word	0x007a1200

080038e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000

080038f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038fc:	f7ff fff0 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0a9b      	lsrs	r3, r3, #10
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4903      	ldr	r1, [pc, #12]	; (800391c <HAL_RCC_GetPCLK1Freq+0x24>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	0800429c 	.word	0x0800429c

08003920 <__errno>:
 8003920:	4b01      	ldr	r3, [pc, #4]	; (8003928 <__errno+0x8>)
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	20000014 	.word	0x20000014

0800392c <__libc_init_array>:
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	4d0d      	ldr	r5, [pc, #52]	; (8003964 <__libc_init_array+0x38>)
 8003930:	4c0d      	ldr	r4, [pc, #52]	; (8003968 <__libc_init_array+0x3c>)
 8003932:	1b64      	subs	r4, r4, r5
 8003934:	10a4      	asrs	r4, r4, #2
 8003936:	2600      	movs	r6, #0
 8003938:	42a6      	cmp	r6, r4
 800393a:	d109      	bne.n	8003950 <__libc_init_array+0x24>
 800393c:	4d0b      	ldr	r5, [pc, #44]	; (800396c <__libc_init_array+0x40>)
 800393e:	4c0c      	ldr	r4, [pc, #48]	; (8003970 <__libc_init_array+0x44>)
 8003940:	f000 fc8e 	bl	8004260 <_init>
 8003944:	1b64      	subs	r4, r4, r5
 8003946:	10a4      	asrs	r4, r4, #2
 8003948:	2600      	movs	r6, #0
 800394a:	42a6      	cmp	r6, r4
 800394c:	d105      	bne.n	800395a <__libc_init_array+0x2e>
 800394e:	bd70      	pop	{r4, r5, r6, pc}
 8003950:	f855 3b04 	ldr.w	r3, [r5], #4
 8003954:	4798      	blx	r3
 8003956:	3601      	adds	r6, #1
 8003958:	e7ee      	b.n	8003938 <__libc_init_array+0xc>
 800395a:	f855 3b04 	ldr.w	r3, [r5], #4
 800395e:	4798      	blx	r3
 8003960:	3601      	adds	r6, #1
 8003962:	e7f2      	b.n	800394a <__libc_init_array+0x1e>
 8003964:	080048d0 	.word	0x080048d0
 8003968:	080048d0 	.word	0x080048d0
 800396c:	080048d0 	.word	0x080048d0
 8003970:	080048d4 	.word	0x080048d4

08003974 <memcpy>:
 8003974:	440a      	add	r2, r1
 8003976:	4291      	cmp	r1, r2
 8003978:	f100 33ff 	add.w	r3, r0, #4294967295
 800397c:	d100      	bne.n	8003980 <memcpy+0xc>
 800397e:	4770      	bx	lr
 8003980:	b510      	push	{r4, lr}
 8003982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800398a:	4291      	cmp	r1, r2
 800398c:	d1f9      	bne.n	8003982 <memcpy+0xe>
 800398e:	bd10      	pop	{r4, pc}

08003990 <memset>:
 8003990:	4402      	add	r2, r0
 8003992:	4603      	mov	r3, r0
 8003994:	4293      	cmp	r3, r2
 8003996:	d100      	bne.n	800399a <memset+0xa>
 8003998:	4770      	bx	lr
 800399a:	f803 1b01 	strb.w	r1, [r3], #1
 800399e:	e7f9      	b.n	8003994 <memset+0x4>

080039a0 <siprintf>:
 80039a0:	b40e      	push	{r1, r2, r3}
 80039a2:	b500      	push	{lr}
 80039a4:	b09c      	sub	sp, #112	; 0x70
 80039a6:	ab1d      	add	r3, sp, #116	; 0x74
 80039a8:	9002      	str	r0, [sp, #8]
 80039aa:	9006      	str	r0, [sp, #24]
 80039ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039b0:	4809      	ldr	r0, [pc, #36]	; (80039d8 <siprintf+0x38>)
 80039b2:	9107      	str	r1, [sp, #28]
 80039b4:	9104      	str	r1, [sp, #16]
 80039b6:	4909      	ldr	r1, [pc, #36]	; (80039dc <siprintf+0x3c>)
 80039b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80039bc:	9105      	str	r1, [sp, #20]
 80039be:	6800      	ldr	r0, [r0, #0]
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	a902      	add	r1, sp, #8
 80039c4:	f000 f868 	bl	8003a98 <_svfiprintf_r>
 80039c8:	9b02      	ldr	r3, [sp, #8]
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	b01c      	add	sp, #112	; 0x70
 80039d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80039d4:	b003      	add	sp, #12
 80039d6:	4770      	bx	lr
 80039d8:	20000014 	.word	0x20000014
 80039dc:	ffff0208 	.word	0xffff0208

080039e0 <__ssputs_r>:
 80039e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e4:	688e      	ldr	r6, [r1, #8]
 80039e6:	429e      	cmp	r6, r3
 80039e8:	4682      	mov	sl, r0
 80039ea:	460c      	mov	r4, r1
 80039ec:	4690      	mov	r8, r2
 80039ee:	461f      	mov	r7, r3
 80039f0:	d838      	bhi.n	8003a64 <__ssputs_r+0x84>
 80039f2:	898a      	ldrh	r2, [r1, #12]
 80039f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039f8:	d032      	beq.n	8003a60 <__ssputs_r+0x80>
 80039fa:	6825      	ldr	r5, [r4, #0]
 80039fc:	6909      	ldr	r1, [r1, #16]
 80039fe:	eba5 0901 	sub.w	r9, r5, r1
 8003a02:	6965      	ldr	r5, [r4, #20]
 8003a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	444b      	add	r3, r9
 8003a10:	106d      	asrs	r5, r5, #1
 8003a12:	429d      	cmp	r5, r3
 8003a14:	bf38      	it	cc
 8003a16:	461d      	movcc	r5, r3
 8003a18:	0553      	lsls	r3, r2, #21
 8003a1a:	d531      	bpl.n	8003a80 <__ssputs_r+0xa0>
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	f000 fb55 	bl	80040cc <_malloc_r>
 8003a22:	4606      	mov	r6, r0
 8003a24:	b950      	cbnz	r0, 8003a3c <__ssputs_r+0x5c>
 8003a26:	230c      	movs	r3, #12
 8003a28:	f8ca 3000 	str.w	r3, [sl]
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a32:	81a3      	strh	r3, [r4, #12]
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a3c:	6921      	ldr	r1, [r4, #16]
 8003a3e:	464a      	mov	r2, r9
 8003a40:	f7ff ff98 	bl	8003974 <memcpy>
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4e:	81a3      	strh	r3, [r4, #12]
 8003a50:	6126      	str	r6, [r4, #16]
 8003a52:	6165      	str	r5, [r4, #20]
 8003a54:	444e      	add	r6, r9
 8003a56:	eba5 0509 	sub.w	r5, r5, r9
 8003a5a:	6026      	str	r6, [r4, #0]
 8003a5c:	60a5      	str	r5, [r4, #8]
 8003a5e:	463e      	mov	r6, r7
 8003a60:	42be      	cmp	r6, r7
 8003a62:	d900      	bls.n	8003a66 <__ssputs_r+0x86>
 8003a64:	463e      	mov	r6, r7
 8003a66:	6820      	ldr	r0, [r4, #0]
 8003a68:	4632      	mov	r2, r6
 8003a6a:	4641      	mov	r1, r8
 8003a6c:	f000 faa8 	bl	8003fc0 <memmove>
 8003a70:	68a3      	ldr	r3, [r4, #8]
 8003a72:	1b9b      	subs	r3, r3, r6
 8003a74:	60a3      	str	r3, [r4, #8]
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	4433      	add	r3, r6
 8003a7a:	6023      	str	r3, [r4, #0]
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	e7db      	b.n	8003a38 <__ssputs_r+0x58>
 8003a80:	462a      	mov	r2, r5
 8003a82:	f000 fb97 	bl	80041b4 <_realloc_r>
 8003a86:	4606      	mov	r6, r0
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d1e1      	bne.n	8003a50 <__ssputs_r+0x70>
 8003a8c:	6921      	ldr	r1, [r4, #16]
 8003a8e:	4650      	mov	r0, sl
 8003a90:	f000 fab0 	bl	8003ff4 <_free_r>
 8003a94:	e7c7      	b.n	8003a26 <__ssputs_r+0x46>
	...

08003a98 <_svfiprintf_r>:
 8003a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9c:	4698      	mov	r8, r3
 8003a9e:	898b      	ldrh	r3, [r1, #12]
 8003aa0:	061b      	lsls	r3, r3, #24
 8003aa2:	b09d      	sub	sp, #116	; 0x74
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	460d      	mov	r5, r1
 8003aa8:	4614      	mov	r4, r2
 8003aaa:	d50e      	bpl.n	8003aca <_svfiprintf_r+0x32>
 8003aac:	690b      	ldr	r3, [r1, #16]
 8003aae:	b963      	cbnz	r3, 8003aca <_svfiprintf_r+0x32>
 8003ab0:	2140      	movs	r1, #64	; 0x40
 8003ab2:	f000 fb0b 	bl	80040cc <_malloc_r>
 8003ab6:	6028      	str	r0, [r5, #0]
 8003ab8:	6128      	str	r0, [r5, #16]
 8003aba:	b920      	cbnz	r0, 8003ac6 <_svfiprintf_r+0x2e>
 8003abc:	230c      	movs	r3, #12
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	e0d1      	b.n	8003c6a <_svfiprintf_r+0x1d2>
 8003ac6:	2340      	movs	r3, #64	; 0x40
 8003ac8:	616b      	str	r3, [r5, #20]
 8003aca:	2300      	movs	r3, #0
 8003acc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ace:	2320      	movs	r3, #32
 8003ad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ad4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ad8:	2330      	movs	r3, #48	; 0x30
 8003ada:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c84 <_svfiprintf_r+0x1ec>
 8003ade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ae2:	f04f 0901 	mov.w	r9, #1
 8003ae6:	4623      	mov	r3, r4
 8003ae8:	469a      	mov	sl, r3
 8003aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aee:	b10a      	cbz	r2, 8003af4 <_svfiprintf_r+0x5c>
 8003af0:	2a25      	cmp	r2, #37	; 0x25
 8003af2:	d1f9      	bne.n	8003ae8 <_svfiprintf_r+0x50>
 8003af4:	ebba 0b04 	subs.w	fp, sl, r4
 8003af8:	d00b      	beq.n	8003b12 <_svfiprintf_r+0x7a>
 8003afa:	465b      	mov	r3, fp
 8003afc:	4622      	mov	r2, r4
 8003afe:	4629      	mov	r1, r5
 8003b00:	4638      	mov	r0, r7
 8003b02:	f7ff ff6d 	bl	80039e0 <__ssputs_r>
 8003b06:	3001      	adds	r0, #1
 8003b08:	f000 80aa 	beq.w	8003c60 <_svfiprintf_r+0x1c8>
 8003b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b0e:	445a      	add	r2, fp
 8003b10:	9209      	str	r2, [sp, #36]	; 0x24
 8003b12:	f89a 3000 	ldrb.w	r3, [sl]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80a2 	beq.w	8003c60 <_svfiprintf_r+0x1c8>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b26:	f10a 0a01 	add.w	sl, sl, #1
 8003b2a:	9304      	str	r3, [sp, #16]
 8003b2c:	9307      	str	r3, [sp, #28]
 8003b2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b32:	931a      	str	r3, [sp, #104]	; 0x68
 8003b34:	4654      	mov	r4, sl
 8003b36:	2205      	movs	r2, #5
 8003b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b3c:	4851      	ldr	r0, [pc, #324]	; (8003c84 <_svfiprintf_r+0x1ec>)
 8003b3e:	f7fc fb47 	bl	80001d0 <memchr>
 8003b42:	9a04      	ldr	r2, [sp, #16]
 8003b44:	b9d8      	cbnz	r0, 8003b7e <_svfiprintf_r+0xe6>
 8003b46:	06d0      	lsls	r0, r2, #27
 8003b48:	bf44      	itt	mi
 8003b4a:	2320      	movmi	r3, #32
 8003b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b50:	0711      	lsls	r1, r2, #28
 8003b52:	bf44      	itt	mi
 8003b54:	232b      	movmi	r3, #43	; 0x2b
 8003b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b60:	d015      	beq.n	8003b8e <_svfiprintf_r+0xf6>
 8003b62:	9a07      	ldr	r2, [sp, #28]
 8003b64:	4654      	mov	r4, sl
 8003b66:	2000      	movs	r0, #0
 8003b68:	f04f 0c0a 	mov.w	ip, #10
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b72:	3b30      	subs	r3, #48	; 0x30
 8003b74:	2b09      	cmp	r3, #9
 8003b76:	d94e      	bls.n	8003c16 <_svfiprintf_r+0x17e>
 8003b78:	b1b0      	cbz	r0, 8003ba8 <_svfiprintf_r+0x110>
 8003b7a:	9207      	str	r2, [sp, #28]
 8003b7c:	e014      	b.n	8003ba8 <_svfiprintf_r+0x110>
 8003b7e:	eba0 0308 	sub.w	r3, r0, r8
 8003b82:	fa09 f303 	lsl.w	r3, r9, r3
 8003b86:	4313      	orrs	r3, r2
 8003b88:	9304      	str	r3, [sp, #16]
 8003b8a:	46a2      	mov	sl, r4
 8003b8c:	e7d2      	b.n	8003b34 <_svfiprintf_r+0x9c>
 8003b8e:	9b03      	ldr	r3, [sp, #12]
 8003b90:	1d19      	adds	r1, r3, #4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	9103      	str	r1, [sp, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bfbb      	ittet	lt
 8003b9a:	425b      	neglt	r3, r3
 8003b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8003ba0:	9307      	strge	r3, [sp, #28]
 8003ba2:	9307      	strlt	r3, [sp, #28]
 8003ba4:	bfb8      	it	lt
 8003ba6:	9204      	strlt	r2, [sp, #16]
 8003ba8:	7823      	ldrb	r3, [r4, #0]
 8003baa:	2b2e      	cmp	r3, #46	; 0x2e
 8003bac:	d10c      	bne.n	8003bc8 <_svfiprintf_r+0x130>
 8003bae:	7863      	ldrb	r3, [r4, #1]
 8003bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bb2:	d135      	bne.n	8003c20 <_svfiprintf_r+0x188>
 8003bb4:	9b03      	ldr	r3, [sp, #12]
 8003bb6:	1d1a      	adds	r2, r3, #4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	9203      	str	r2, [sp, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bfb8      	it	lt
 8003bc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bc4:	3402      	adds	r4, #2
 8003bc6:	9305      	str	r3, [sp, #20]
 8003bc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c94 <_svfiprintf_r+0x1fc>
 8003bcc:	7821      	ldrb	r1, [r4, #0]
 8003bce:	2203      	movs	r2, #3
 8003bd0:	4650      	mov	r0, sl
 8003bd2:	f7fc fafd 	bl	80001d0 <memchr>
 8003bd6:	b140      	cbz	r0, 8003bea <_svfiprintf_r+0x152>
 8003bd8:	2340      	movs	r3, #64	; 0x40
 8003bda:	eba0 000a 	sub.w	r0, r0, sl
 8003bde:	fa03 f000 	lsl.w	r0, r3, r0
 8003be2:	9b04      	ldr	r3, [sp, #16]
 8003be4:	4303      	orrs	r3, r0
 8003be6:	3401      	adds	r4, #1
 8003be8:	9304      	str	r3, [sp, #16]
 8003bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bee:	4826      	ldr	r0, [pc, #152]	; (8003c88 <_svfiprintf_r+0x1f0>)
 8003bf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bf4:	2206      	movs	r2, #6
 8003bf6:	f7fc faeb 	bl	80001d0 <memchr>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d038      	beq.n	8003c70 <_svfiprintf_r+0x1d8>
 8003bfe:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <_svfiprintf_r+0x1f4>)
 8003c00:	bb1b      	cbnz	r3, 8003c4a <_svfiprintf_r+0x1b2>
 8003c02:	9b03      	ldr	r3, [sp, #12]
 8003c04:	3307      	adds	r3, #7
 8003c06:	f023 0307 	bic.w	r3, r3, #7
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	9303      	str	r3, [sp, #12]
 8003c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c10:	4433      	add	r3, r6
 8003c12:	9309      	str	r3, [sp, #36]	; 0x24
 8003c14:	e767      	b.n	8003ae6 <_svfiprintf_r+0x4e>
 8003c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	e7a5      	b.n	8003b6c <_svfiprintf_r+0xd4>
 8003c20:	2300      	movs	r3, #0
 8003c22:	3401      	adds	r4, #1
 8003c24:	9305      	str	r3, [sp, #20]
 8003c26:	4619      	mov	r1, r3
 8003c28:	f04f 0c0a 	mov.w	ip, #10
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c32:	3a30      	subs	r2, #48	; 0x30
 8003c34:	2a09      	cmp	r2, #9
 8003c36:	d903      	bls.n	8003c40 <_svfiprintf_r+0x1a8>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0c5      	beq.n	8003bc8 <_svfiprintf_r+0x130>
 8003c3c:	9105      	str	r1, [sp, #20]
 8003c3e:	e7c3      	b.n	8003bc8 <_svfiprintf_r+0x130>
 8003c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c44:	4604      	mov	r4, r0
 8003c46:	2301      	movs	r3, #1
 8003c48:	e7f0      	b.n	8003c2c <_svfiprintf_r+0x194>
 8003c4a:	ab03      	add	r3, sp, #12
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	462a      	mov	r2, r5
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <_svfiprintf_r+0x1f8>)
 8003c52:	a904      	add	r1, sp, #16
 8003c54:	4638      	mov	r0, r7
 8003c56:	f3af 8000 	nop.w
 8003c5a:	1c42      	adds	r2, r0, #1
 8003c5c:	4606      	mov	r6, r0
 8003c5e:	d1d6      	bne.n	8003c0e <_svfiprintf_r+0x176>
 8003c60:	89ab      	ldrh	r3, [r5, #12]
 8003c62:	065b      	lsls	r3, r3, #25
 8003c64:	f53f af2c 	bmi.w	8003ac0 <_svfiprintf_r+0x28>
 8003c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c6a:	b01d      	add	sp, #116	; 0x74
 8003c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c70:	ab03      	add	r3, sp, #12
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	462a      	mov	r2, r5
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <_svfiprintf_r+0x1f8>)
 8003c78:	a904      	add	r1, sp, #16
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	f000 f87a 	bl	8003d74 <_printf_i>
 8003c80:	e7eb      	b.n	8003c5a <_svfiprintf_r+0x1c2>
 8003c82:	bf00      	nop
 8003c84:	08004894 	.word	0x08004894
 8003c88:	0800489e 	.word	0x0800489e
 8003c8c:	00000000 	.word	0x00000000
 8003c90:	080039e1 	.word	0x080039e1
 8003c94:	0800489a 	.word	0x0800489a

08003c98 <_printf_common>:
 8003c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c9c:	4616      	mov	r6, r2
 8003c9e:	4699      	mov	r9, r3
 8003ca0:	688a      	ldr	r2, [r1, #8]
 8003ca2:	690b      	ldr	r3, [r1, #16]
 8003ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	bfb8      	it	lt
 8003cac:	4613      	movlt	r3, r2
 8003cae:	6033      	str	r3, [r6, #0]
 8003cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cb4:	4607      	mov	r7, r0
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	b10a      	cbz	r2, 8003cbe <_printf_common+0x26>
 8003cba:	3301      	adds	r3, #1
 8003cbc:	6033      	str	r3, [r6, #0]
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	0699      	lsls	r1, r3, #26
 8003cc2:	bf42      	ittt	mi
 8003cc4:	6833      	ldrmi	r3, [r6, #0]
 8003cc6:	3302      	addmi	r3, #2
 8003cc8:	6033      	strmi	r3, [r6, #0]
 8003cca:	6825      	ldr	r5, [r4, #0]
 8003ccc:	f015 0506 	ands.w	r5, r5, #6
 8003cd0:	d106      	bne.n	8003ce0 <_printf_common+0x48>
 8003cd2:	f104 0a19 	add.w	sl, r4, #25
 8003cd6:	68e3      	ldr	r3, [r4, #12]
 8003cd8:	6832      	ldr	r2, [r6, #0]
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	42ab      	cmp	r3, r5
 8003cde:	dc26      	bgt.n	8003d2e <_printf_common+0x96>
 8003ce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ce4:	1e13      	subs	r3, r2, #0
 8003ce6:	6822      	ldr	r2, [r4, #0]
 8003ce8:	bf18      	it	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	0692      	lsls	r2, r2, #26
 8003cee:	d42b      	bmi.n	8003d48 <_printf_common+0xb0>
 8003cf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	47c0      	blx	r8
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d01e      	beq.n	8003d3c <_printf_common+0xa4>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	68e5      	ldr	r5, [r4, #12]
 8003d02:	6832      	ldr	r2, [r6, #0]
 8003d04:	f003 0306 	and.w	r3, r3, #6
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	bf08      	it	eq
 8003d0c:	1aad      	subeq	r5, r5, r2
 8003d0e:	68a3      	ldr	r3, [r4, #8]
 8003d10:	6922      	ldr	r2, [r4, #16]
 8003d12:	bf0c      	ite	eq
 8003d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d18:	2500      	movne	r5, #0
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	bfc4      	itt	gt
 8003d1e:	1a9b      	subgt	r3, r3, r2
 8003d20:	18ed      	addgt	r5, r5, r3
 8003d22:	2600      	movs	r6, #0
 8003d24:	341a      	adds	r4, #26
 8003d26:	42b5      	cmp	r5, r6
 8003d28:	d11a      	bne.n	8003d60 <_printf_common+0xc8>
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	e008      	b.n	8003d40 <_printf_common+0xa8>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	4652      	mov	r2, sl
 8003d32:	4649      	mov	r1, r9
 8003d34:	4638      	mov	r0, r7
 8003d36:	47c0      	blx	r8
 8003d38:	3001      	adds	r0, #1
 8003d3a:	d103      	bne.n	8003d44 <_printf_common+0xac>
 8003d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d44:	3501      	adds	r5, #1
 8003d46:	e7c6      	b.n	8003cd6 <_printf_common+0x3e>
 8003d48:	18e1      	adds	r1, r4, r3
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	2030      	movs	r0, #48	; 0x30
 8003d4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d52:	4422      	add	r2, r4
 8003d54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	e7c7      	b.n	8003cf0 <_printf_common+0x58>
 8003d60:	2301      	movs	r3, #1
 8003d62:	4622      	mov	r2, r4
 8003d64:	4649      	mov	r1, r9
 8003d66:	4638      	mov	r0, r7
 8003d68:	47c0      	blx	r8
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d0e6      	beq.n	8003d3c <_printf_common+0xa4>
 8003d6e:	3601      	adds	r6, #1
 8003d70:	e7d9      	b.n	8003d26 <_printf_common+0x8e>
	...

08003d74 <_printf_i>:
 8003d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d78:	7e0f      	ldrb	r7, [r1, #24]
 8003d7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d7c:	2f78      	cmp	r7, #120	; 0x78
 8003d7e:	4691      	mov	r9, r2
 8003d80:	4680      	mov	r8, r0
 8003d82:	460c      	mov	r4, r1
 8003d84:	469a      	mov	sl, r3
 8003d86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d8a:	d807      	bhi.n	8003d9c <_printf_i+0x28>
 8003d8c:	2f62      	cmp	r7, #98	; 0x62
 8003d8e:	d80a      	bhi.n	8003da6 <_printf_i+0x32>
 8003d90:	2f00      	cmp	r7, #0
 8003d92:	f000 80d8 	beq.w	8003f46 <_printf_i+0x1d2>
 8003d96:	2f58      	cmp	r7, #88	; 0x58
 8003d98:	f000 80a3 	beq.w	8003ee2 <_printf_i+0x16e>
 8003d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003da0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003da4:	e03a      	b.n	8003e1c <_printf_i+0xa8>
 8003da6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003daa:	2b15      	cmp	r3, #21
 8003dac:	d8f6      	bhi.n	8003d9c <_printf_i+0x28>
 8003dae:	a101      	add	r1, pc, #4	; (adr r1, 8003db4 <_printf_i+0x40>)
 8003db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003db4:	08003e0d 	.word	0x08003e0d
 8003db8:	08003e21 	.word	0x08003e21
 8003dbc:	08003d9d 	.word	0x08003d9d
 8003dc0:	08003d9d 	.word	0x08003d9d
 8003dc4:	08003d9d 	.word	0x08003d9d
 8003dc8:	08003d9d 	.word	0x08003d9d
 8003dcc:	08003e21 	.word	0x08003e21
 8003dd0:	08003d9d 	.word	0x08003d9d
 8003dd4:	08003d9d 	.word	0x08003d9d
 8003dd8:	08003d9d 	.word	0x08003d9d
 8003ddc:	08003d9d 	.word	0x08003d9d
 8003de0:	08003f2d 	.word	0x08003f2d
 8003de4:	08003e51 	.word	0x08003e51
 8003de8:	08003f0f 	.word	0x08003f0f
 8003dec:	08003d9d 	.word	0x08003d9d
 8003df0:	08003d9d 	.word	0x08003d9d
 8003df4:	08003f4f 	.word	0x08003f4f
 8003df8:	08003d9d 	.word	0x08003d9d
 8003dfc:	08003e51 	.word	0x08003e51
 8003e00:	08003d9d 	.word	0x08003d9d
 8003e04:	08003d9d 	.word	0x08003d9d
 8003e08:	08003f17 	.word	0x08003f17
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	1d1a      	adds	r2, r3, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	602a      	str	r2, [r5, #0]
 8003e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0a3      	b.n	8003f68 <_printf_i+0x1f4>
 8003e20:	6820      	ldr	r0, [r4, #0]
 8003e22:	6829      	ldr	r1, [r5, #0]
 8003e24:	0606      	lsls	r6, r0, #24
 8003e26:	f101 0304 	add.w	r3, r1, #4
 8003e2a:	d50a      	bpl.n	8003e42 <_printf_i+0xce>
 8003e2c:	680e      	ldr	r6, [r1, #0]
 8003e2e:	602b      	str	r3, [r5, #0]
 8003e30:	2e00      	cmp	r6, #0
 8003e32:	da03      	bge.n	8003e3c <_printf_i+0xc8>
 8003e34:	232d      	movs	r3, #45	; 0x2d
 8003e36:	4276      	negs	r6, r6
 8003e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e3c:	485e      	ldr	r0, [pc, #376]	; (8003fb8 <_printf_i+0x244>)
 8003e3e:	230a      	movs	r3, #10
 8003e40:	e019      	b.n	8003e76 <_printf_i+0x102>
 8003e42:	680e      	ldr	r6, [r1, #0]
 8003e44:	602b      	str	r3, [r5, #0]
 8003e46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e4a:	bf18      	it	ne
 8003e4c:	b236      	sxthne	r6, r6
 8003e4e:	e7ef      	b.n	8003e30 <_printf_i+0xbc>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	6820      	ldr	r0, [r4, #0]
 8003e54:	1d19      	adds	r1, r3, #4
 8003e56:	6029      	str	r1, [r5, #0]
 8003e58:	0601      	lsls	r1, r0, #24
 8003e5a:	d501      	bpl.n	8003e60 <_printf_i+0xec>
 8003e5c:	681e      	ldr	r6, [r3, #0]
 8003e5e:	e002      	b.n	8003e66 <_printf_i+0xf2>
 8003e60:	0646      	lsls	r6, r0, #25
 8003e62:	d5fb      	bpl.n	8003e5c <_printf_i+0xe8>
 8003e64:	881e      	ldrh	r6, [r3, #0]
 8003e66:	4854      	ldr	r0, [pc, #336]	; (8003fb8 <_printf_i+0x244>)
 8003e68:	2f6f      	cmp	r7, #111	; 0x6f
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2308      	moveq	r3, #8
 8003e6e:	230a      	movne	r3, #10
 8003e70:	2100      	movs	r1, #0
 8003e72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e76:	6865      	ldr	r5, [r4, #4]
 8003e78:	60a5      	str	r5, [r4, #8]
 8003e7a:	2d00      	cmp	r5, #0
 8003e7c:	bfa2      	ittt	ge
 8003e7e:	6821      	ldrge	r1, [r4, #0]
 8003e80:	f021 0104 	bicge.w	r1, r1, #4
 8003e84:	6021      	strge	r1, [r4, #0]
 8003e86:	b90e      	cbnz	r6, 8003e8c <_printf_i+0x118>
 8003e88:	2d00      	cmp	r5, #0
 8003e8a:	d04d      	beq.n	8003f28 <_printf_i+0x1b4>
 8003e8c:	4615      	mov	r5, r2
 8003e8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e92:	fb03 6711 	mls	r7, r3, r1, r6
 8003e96:	5dc7      	ldrb	r7, [r0, r7]
 8003e98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e9c:	4637      	mov	r7, r6
 8003e9e:	42bb      	cmp	r3, r7
 8003ea0:	460e      	mov	r6, r1
 8003ea2:	d9f4      	bls.n	8003e8e <_printf_i+0x11a>
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d10b      	bne.n	8003ec0 <_printf_i+0x14c>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	07de      	lsls	r6, r3, #31
 8003eac:	d508      	bpl.n	8003ec0 <_printf_i+0x14c>
 8003eae:	6923      	ldr	r3, [r4, #16]
 8003eb0:	6861      	ldr	r1, [r4, #4]
 8003eb2:	4299      	cmp	r1, r3
 8003eb4:	bfde      	ittt	le
 8003eb6:	2330      	movle	r3, #48	; 0x30
 8003eb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ebc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ec0:	1b52      	subs	r2, r2, r5
 8003ec2:	6122      	str	r2, [r4, #16]
 8003ec4:	f8cd a000 	str.w	sl, [sp]
 8003ec8:	464b      	mov	r3, r9
 8003eca:	aa03      	add	r2, sp, #12
 8003ecc:	4621      	mov	r1, r4
 8003ece:	4640      	mov	r0, r8
 8003ed0:	f7ff fee2 	bl	8003c98 <_printf_common>
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d14c      	bne.n	8003f72 <_printf_i+0x1fe>
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8003edc:	b004      	add	sp, #16
 8003ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee2:	4835      	ldr	r0, [pc, #212]	; (8003fb8 <_printf_i+0x244>)
 8003ee4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ee8:	6829      	ldr	r1, [r5, #0]
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ef0:	6029      	str	r1, [r5, #0]
 8003ef2:	061d      	lsls	r5, r3, #24
 8003ef4:	d514      	bpl.n	8003f20 <_printf_i+0x1ac>
 8003ef6:	07df      	lsls	r7, r3, #31
 8003ef8:	bf44      	itt	mi
 8003efa:	f043 0320 	orrmi.w	r3, r3, #32
 8003efe:	6023      	strmi	r3, [r4, #0]
 8003f00:	b91e      	cbnz	r6, 8003f0a <_printf_i+0x196>
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	f023 0320 	bic.w	r3, r3, #32
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	2310      	movs	r3, #16
 8003f0c:	e7b0      	b.n	8003e70 <_printf_i+0xfc>
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	f043 0320 	orr.w	r3, r3, #32
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	2378      	movs	r3, #120	; 0x78
 8003f18:	4828      	ldr	r0, [pc, #160]	; (8003fbc <_printf_i+0x248>)
 8003f1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f1e:	e7e3      	b.n	8003ee8 <_printf_i+0x174>
 8003f20:	0659      	lsls	r1, r3, #25
 8003f22:	bf48      	it	mi
 8003f24:	b2b6      	uxthmi	r6, r6
 8003f26:	e7e6      	b.n	8003ef6 <_printf_i+0x182>
 8003f28:	4615      	mov	r5, r2
 8003f2a:	e7bb      	b.n	8003ea4 <_printf_i+0x130>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	6826      	ldr	r6, [r4, #0]
 8003f30:	6961      	ldr	r1, [r4, #20]
 8003f32:	1d18      	adds	r0, r3, #4
 8003f34:	6028      	str	r0, [r5, #0]
 8003f36:	0635      	lsls	r5, r6, #24
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	d501      	bpl.n	8003f40 <_printf_i+0x1cc>
 8003f3c:	6019      	str	r1, [r3, #0]
 8003f3e:	e002      	b.n	8003f46 <_printf_i+0x1d2>
 8003f40:	0670      	lsls	r0, r6, #25
 8003f42:	d5fb      	bpl.n	8003f3c <_printf_i+0x1c8>
 8003f44:	8019      	strh	r1, [r3, #0]
 8003f46:	2300      	movs	r3, #0
 8003f48:	6123      	str	r3, [r4, #16]
 8003f4a:	4615      	mov	r5, r2
 8003f4c:	e7ba      	b.n	8003ec4 <_printf_i+0x150>
 8003f4e:	682b      	ldr	r3, [r5, #0]
 8003f50:	1d1a      	adds	r2, r3, #4
 8003f52:	602a      	str	r2, [r5, #0]
 8003f54:	681d      	ldr	r5, [r3, #0]
 8003f56:	6862      	ldr	r2, [r4, #4]
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f7fc f938 	bl	80001d0 <memchr>
 8003f60:	b108      	cbz	r0, 8003f66 <_printf_i+0x1f2>
 8003f62:	1b40      	subs	r0, r0, r5
 8003f64:	6060      	str	r0, [r4, #4]
 8003f66:	6863      	ldr	r3, [r4, #4]
 8003f68:	6123      	str	r3, [r4, #16]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f70:	e7a8      	b.n	8003ec4 <_printf_i+0x150>
 8003f72:	6923      	ldr	r3, [r4, #16]
 8003f74:	462a      	mov	r2, r5
 8003f76:	4649      	mov	r1, r9
 8003f78:	4640      	mov	r0, r8
 8003f7a:	47d0      	blx	sl
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	d0ab      	beq.n	8003ed8 <_printf_i+0x164>
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	079b      	lsls	r3, r3, #30
 8003f84:	d413      	bmi.n	8003fae <_printf_i+0x23a>
 8003f86:	68e0      	ldr	r0, [r4, #12]
 8003f88:	9b03      	ldr	r3, [sp, #12]
 8003f8a:	4298      	cmp	r0, r3
 8003f8c:	bfb8      	it	lt
 8003f8e:	4618      	movlt	r0, r3
 8003f90:	e7a4      	b.n	8003edc <_printf_i+0x168>
 8003f92:	2301      	movs	r3, #1
 8003f94:	4632      	mov	r2, r6
 8003f96:	4649      	mov	r1, r9
 8003f98:	4640      	mov	r0, r8
 8003f9a:	47d0      	blx	sl
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	d09b      	beq.n	8003ed8 <_printf_i+0x164>
 8003fa0:	3501      	adds	r5, #1
 8003fa2:	68e3      	ldr	r3, [r4, #12]
 8003fa4:	9903      	ldr	r1, [sp, #12]
 8003fa6:	1a5b      	subs	r3, r3, r1
 8003fa8:	42ab      	cmp	r3, r5
 8003faa:	dcf2      	bgt.n	8003f92 <_printf_i+0x21e>
 8003fac:	e7eb      	b.n	8003f86 <_printf_i+0x212>
 8003fae:	2500      	movs	r5, #0
 8003fb0:	f104 0619 	add.w	r6, r4, #25
 8003fb4:	e7f5      	b.n	8003fa2 <_printf_i+0x22e>
 8003fb6:	bf00      	nop
 8003fb8:	080048a5 	.word	0x080048a5
 8003fbc:	080048b6 	.word	0x080048b6

08003fc0 <memmove>:
 8003fc0:	4288      	cmp	r0, r1
 8003fc2:	b510      	push	{r4, lr}
 8003fc4:	eb01 0402 	add.w	r4, r1, r2
 8003fc8:	d902      	bls.n	8003fd0 <memmove+0x10>
 8003fca:	4284      	cmp	r4, r0
 8003fcc:	4623      	mov	r3, r4
 8003fce:	d807      	bhi.n	8003fe0 <memmove+0x20>
 8003fd0:	1e43      	subs	r3, r0, #1
 8003fd2:	42a1      	cmp	r1, r4
 8003fd4:	d008      	beq.n	8003fe8 <memmove+0x28>
 8003fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fde:	e7f8      	b.n	8003fd2 <memmove+0x12>
 8003fe0:	4402      	add	r2, r0
 8003fe2:	4601      	mov	r1, r0
 8003fe4:	428a      	cmp	r2, r1
 8003fe6:	d100      	bne.n	8003fea <memmove+0x2a>
 8003fe8:	bd10      	pop	{r4, pc}
 8003fea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ff2:	e7f7      	b.n	8003fe4 <memmove+0x24>

08003ff4 <_free_r>:
 8003ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ff6:	2900      	cmp	r1, #0
 8003ff8:	d044      	beq.n	8004084 <_free_r+0x90>
 8003ffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ffe:	9001      	str	r0, [sp, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f1a1 0404 	sub.w	r4, r1, #4
 8004006:	bfb8      	it	lt
 8004008:	18e4      	addlt	r4, r4, r3
 800400a:	f000 f913 	bl	8004234 <__malloc_lock>
 800400e:	4a1e      	ldr	r2, [pc, #120]	; (8004088 <_free_r+0x94>)
 8004010:	9801      	ldr	r0, [sp, #4]
 8004012:	6813      	ldr	r3, [r2, #0]
 8004014:	b933      	cbnz	r3, 8004024 <_free_r+0x30>
 8004016:	6063      	str	r3, [r4, #4]
 8004018:	6014      	str	r4, [r2, #0]
 800401a:	b003      	add	sp, #12
 800401c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004020:	f000 b90e 	b.w	8004240 <__malloc_unlock>
 8004024:	42a3      	cmp	r3, r4
 8004026:	d908      	bls.n	800403a <_free_r+0x46>
 8004028:	6825      	ldr	r5, [r4, #0]
 800402a:	1961      	adds	r1, r4, r5
 800402c:	428b      	cmp	r3, r1
 800402e:	bf01      	itttt	eq
 8004030:	6819      	ldreq	r1, [r3, #0]
 8004032:	685b      	ldreq	r3, [r3, #4]
 8004034:	1949      	addeq	r1, r1, r5
 8004036:	6021      	streq	r1, [r4, #0]
 8004038:	e7ed      	b.n	8004016 <_free_r+0x22>
 800403a:	461a      	mov	r2, r3
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	b10b      	cbz	r3, 8004044 <_free_r+0x50>
 8004040:	42a3      	cmp	r3, r4
 8004042:	d9fa      	bls.n	800403a <_free_r+0x46>
 8004044:	6811      	ldr	r1, [r2, #0]
 8004046:	1855      	adds	r5, r2, r1
 8004048:	42a5      	cmp	r5, r4
 800404a:	d10b      	bne.n	8004064 <_free_r+0x70>
 800404c:	6824      	ldr	r4, [r4, #0]
 800404e:	4421      	add	r1, r4
 8004050:	1854      	adds	r4, r2, r1
 8004052:	42a3      	cmp	r3, r4
 8004054:	6011      	str	r1, [r2, #0]
 8004056:	d1e0      	bne.n	800401a <_free_r+0x26>
 8004058:	681c      	ldr	r4, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	6053      	str	r3, [r2, #4]
 800405e:	4421      	add	r1, r4
 8004060:	6011      	str	r1, [r2, #0]
 8004062:	e7da      	b.n	800401a <_free_r+0x26>
 8004064:	d902      	bls.n	800406c <_free_r+0x78>
 8004066:	230c      	movs	r3, #12
 8004068:	6003      	str	r3, [r0, #0]
 800406a:	e7d6      	b.n	800401a <_free_r+0x26>
 800406c:	6825      	ldr	r5, [r4, #0]
 800406e:	1961      	adds	r1, r4, r5
 8004070:	428b      	cmp	r3, r1
 8004072:	bf04      	itt	eq
 8004074:	6819      	ldreq	r1, [r3, #0]
 8004076:	685b      	ldreq	r3, [r3, #4]
 8004078:	6063      	str	r3, [r4, #4]
 800407a:	bf04      	itt	eq
 800407c:	1949      	addeq	r1, r1, r5
 800407e:	6021      	streq	r1, [r4, #0]
 8004080:	6054      	str	r4, [r2, #4]
 8004082:	e7ca      	b.n	800401a <_free_r+0x26>
 8004084:	b003      	add	sp, #12
 8004086:	bd30      	pop	{r4, r5, pc}
 8004088:	20000584 	.word	0x20000584

0800408c <sbrk_aligned>:
 800408c:	b570      	push	{r4, r5, r6, lr}
 800408e:	4e0e      	ldr	r6, [pc, #56]	; (80040c8 <sbrk_aligned+0x3c>)
 8004090:	460c      	mov	r4, r1
 8004092:	6831      	ldr	r1, [r6, #0]
 8004094:	4605      	mov	r5, r0
 8004096:	b911      	cbnz	r1, 800409e <sbrk_aligned+0x12>
 8004098:	f000 f8bc 	bl	8004214 <_sbrk_r>
 800409c:	6030      	str	r0, [r6, #0]
 800409e:	4621      	mov	r1, r4
 80040a0:	4628      	mov	r0, r5
 80040a2:	f000 f8b7 	bl	8004214 <_sbrk_r>
 80040a6:	1c43      	adds	r3, r0, #1
 80040a8:	d00a      	beq.n	80040c0 <sbrk_aligned+0x34>
 80040aa:	1cc4      	adds	r4, r0, #3
 80040ac:	f024 0403 	bic.w	r4, r4, #3
 80040b0:	42a0      	cmp	r0, r4
 80040b2:	d007      	beq.n	80040c4 <sbrk_aligned+0x38>
 80040b4:	1a21      	subs	r1, r4, r0
 80040b6:	4628      	mov	r0, r5
 80040b8:	f000 f8ac 	bl	8004214 <_sbrk_r>
 80040bc:	3001      	adds	r0, #1
 80040be:	d101      	bne.n	80040c4 <sbrk_aligned+0x38>
 80040c0:	f04f 34ff 	mov.w	r4, #4294967295
 80040c4:	4620      	mov	r0, r4
 80040c6:	bd70      	pop	{r4, r5, r6, pc}
 80040c8:	20000588 	.word	0x20000588

080040cc <_malloc_r>:
 80040cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d0:	1ccd      	adds	r5, r1, #3
 80040d2:	f025 0503 	bic.w	r5, r5, #3
 80040d6:	3508      	adds	r5, #8
 80040d8:	2d0c      	cmp	r5, #12
 80040da:	bf38      	it	cc
 80040dc:	250c      	movcc	r5, #12
 80040de:	2d00      	cmp	r5, #0
 80040e0:	4607      	mov	r7, r0
 80040e2:	db01      	blt.n	80040e8 <_malloc_r+0x1c>
 80040e4:	42a9      	cmp	r1, r5
 80040e6:	d905      	bls.n	80040f4 <_malloc_r+0x28>
 80040e8:	230c      	movs	r3, #12
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	2600      	movs	r6, #0
 80040ee:	4630      	mov	r0, r6
 80040f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040f4:	4e2e      	ldr	r6, [pc, #184]	; (80041b0 <_malloc_r+0xe4>)
 80040f6:	f000 f89d 	bl	8004234 <__malloc_lock>
 80040fa:	6833      	ldr	r3, [r6, #0]
 80040fc:	461c      	mov	r4, r3
 80040fe:	bb34      	cbnz	r4, 800414e <_malloc_r+0x82>
 8004100:	4629      	mov	r1, r5
 8004102:	4638      	mov	r0, r7
 8004104:	f7ff ffc2 	bl	800408c <sbrk_aligned>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	4604      	mov	r4, r0
 800410c:	d14d      	bne.n	80041aa <_malloc_r+0xde>
 800410e:	6834      	ldr	r4, [r6, #0]
 8004110:	4626      	mov	r6, r4
 8004112:	2e00      	cmp	r6, #0
 8004114:	d140      	bne.n	8004198 <_malloc_r+0xcc>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	4631      	mov	r1, r6
 800411a:	4638      	mov	r0, r7
 800411c:	eb04 0803 	add.w	r8, r4, r3
 8004120:	f000 f878 	bl	8004214 <_sbrk_r>
 8004124:	4580      	cmp	r8, r0
 8004126:	d13a      	bne.n	800419e <_malloc_r+0xd2>
 8004128:	6821      	ldr	r1, [r4, #0]
 800412a:	3503      	adds	r5, #3
 800412c:	1a6d      	subs	r5, r5, r1
 800412e:	f025 0503 	bic.w	r5, r5, #3
 8004132:	3508      	adds	r5, #8
 8004134:	2d0c      	cmp	r5, #12
 8004136:	bf38      	it	cc
 8004138:	250c      	movcc	r5, #12
 800413a:	4629      	mov	r1, r5
 800413c:	4638      	mov	r0, r7
 800413e:	f7ff ffa5 	bl	800408c <sbrk_aligned>
 8004142:	3001      	adds	r0, #1
 8004144:	d02b      	beq.n	800419e <_malloc_r+0xd2>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	442b      	add	r3, r5
 800414a:	6023      	str	r3, [r4, #0]
 800414c:	e00e      	b.n	800416c <_malloc_r+0xa0>
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	1b52      	subs	r2, r2, r5
 8004152:	d41e      	bmi.n	8004192 <_malloc_r+0xc6>
 8004154:	2a0b      	cmp	r2, #11
 8004156:	d916      	bls.n	8004186 <_malloc_r+0xba>
 8004158:	1961      	adds	r1, r4, r5
 800415a:	42a3      	cmp	r3, r4
 800415c:	6025      	str	r5, [r4, #0]
 800415e:	bf18      	it	ne
 8004160:	6059      	strne	r1, [r3, #4]
 8004162:	6863      	ldr	r3, [r4, #4]
 8004164:	bf08      	it	eq
 8004166:	6031      	streq	r1, [r6, #0]
 8004168:	5162      	str	r2, [r4, r5]
 800416a:	604b      	str	r3, [r1, #4]
 800416c:	4638      	mov	r0, r7
 800416e:	f104 060b 	add.w	r6, r4, #11
 8004172:	f000 f865 	bl	8004240 <__malloc_unlock>
 8004176:	f026 0607 	bic.w	r6, r6, #7
 800417a:	1d23      	adds	r3, r4, #4
 800417c:	1af2      	subs	r2, r6, r3
 800417e:	d0b6      	beq.n	80040ee <_malloc_r+0x22>
 8004180:	1b9b      	subs	r3, r3, r6
 8004182:	50a3      	str	r3, [r4, r2]
 8004184:	e7b3      	b.n	80040ee <_malloc_r+0x22>
 8004186:	6862      	ldr	r2, [r4, #4]
 8004188:	42a3      	cmp	r3, r4
 800418a:	bf0c      	ite	eq
 800418c:	6032      	streq	r2, [r6, #0]
 800418e:	605a      	strne	r2, [r3, #4]
 8004190:	e7ec      	b.n	800416c <_malloc_r+0xa0>
 8004192:	4623      	mov	r3, r4
 8004194:	6864      	ldr	r4, [r4, #4]
 8004196:	e7b2      	b.n	80040fe <_malloc_r+0x32>
 8004198:	4634      	mov	r4, r6
 800419a:	6876      	ldr	r6, [r6, #4]
 800419c:	e7b9      	b.n	8004112 <_malloc_r+0x46>
 800419e:	230c      	movs	r3, #12
 80041a0:	603b      	str	r3, [r7, #0]
 80041a2:	4638      	mov	r0, r7
 80041a4:	f000 f84c 	bl	8004240 <__malloc_unlock>
 80041a8:	e7a1      	b.n	80040ee <_malloc_r+0x22>
 80041aa:	6025      	str	r5, [r4, #0]
 80041ac:	e7de      	b.n	800416c <_malloc_r+0xa0>
 80041ae:	bf00      	nop
 80041b0:	20000584 	.word	0x20000584

080041b4 <_realloc_r>:
 80041b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b8:	4680      	mov	r8, r0
 80041ba:	4614      	mov	r4, r2
 80041bc:	460e      	mov	r6, r1
 80041be:	b921      	cbnz	r1, 80041ca <_realloc_r+0x16>
 80041c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041c4:	4611      	mov	r1, r2
 80041c6:	f7ff bf81 	b.w	80040cc <_malloc_r>
 80041ca:	b92a      	cbnz	r2, 80041d8 <_realloc_r+0x24>
 80041cc:	f7ff ff12 	bl	8003ff4 <_free_r>
 80041d0:	4625      	mov	r5, r4
 80041d2:	4628      	mov	r0, r5
 80041d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d8:	f000 f838 	bl	800424c <_malloc_usable_size_r>
 80041dc:	4284      	cmp	r4, r0
 80041de:	4607      	mov	r7, r0
 80041e0:	d802      	bhi.n	80041e8 <_realloc_r+0x34>
 80041e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041e6:	d812      	bhi.n	800420e <_realloc_r+0x5a>
 80041e8:	4621      	mov	r1, r4
 80041ea:	4640      	mov	r0, r8
 80041ec:	f7ff ff6e 	bl	80040cc <_malloc_r>
 80041f0:	4605      	mov	r5, r0
 80041f2:	2800      	cmp	r0, #0
 80041f4:	d0ed      	beq.n	80041d2 <_realloc_r+0x1e>
 80041f6:	42bc      	cmp	r4, r7
 80041f8:	4622      	mov	r2, r4
 80041fa:	4631      	mov	r1, r6
 80041fc:	bf28      	it	cs
 80041fe:	463a      	movcs	r2, r7
 8004200:	f7ff fbb8 	bl	8003974 <memcpy>
 8004204:	4631      	mov	r1, r6
 8004206:	4640      	mov	r0, r8
 8004208:	f7ff fef4 	bl	8003ff4 <_free_r>
 800420c:	e7e1      	b.n	80041d2 <_realloc_r+0x1e>
 800420e:	4635      	mov	r5, r6
 8004210:	e7df      	b.n	80041d2 <_realloc_r+0x1e>
	...

08004214 <_sbrk_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4d06      	ldr	r5, [pc, #24]	; (8004230 <_sbrk_r+0x1c>)
 8004218:	2300      	movs	r3, #0
 800421a:	4604      	mov	r4, r0
 800421c:	4608      	mov	r0, r1
 800421e:	602b      	str	r3, [r5, #0]
 8004220:	f7fd f976 	bl	8001510 <_sbrk>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_sbrk_r+0x1a>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	b103      	cbz	r3, 800422e <_sbrk_r+0x1a>
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	2000058c 	.word	0x2000058c

08004234 <__malloc_lock>:
 8004234:	4801      	ldr	r0, [pc, #4]	; (800423c <__malloc_lock+0x8>)
 8004236:	f000 b811 	b.w	800425c <__retarget_lock_acquire_recursive>
 800423a:	bf00      	nop
 800423c:	20000590 	.word	0x20000590

08004240 <__malloc_unlock>:
 8004240:	4801      	ldr	r0, [pc, #4]	; (8004248 <__malloc_unlock+0x8>)
 8004242:	f000 b80c 	b.w	800425e <__retarget_lock_release_recursive>
 8004246:	bf00      	nop
 8004248:	20000590 	.word	0x20000590

0800424c <_malloc_usable_size_r>:
 800424c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004250:	1f18      	subs	r0, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	bfbc      	itt	lt
 8004256:	580b      	ldrlt	r3, [r1, r0]
 8004258:	18c0      	addlt	r0, r0, r3
 800425a:	4770      	bx	lr

0800425c <__retarget_lock_acquire_recursive>:
 800425c:	4770      	bx	lr

0800425e <__retarget_lock_release_recursive>:
 800425e:	4770      	bx	lr

08004260 <_init>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	bf00      	nop
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr

0800426c <_fini>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr
